@page "/Account/ReviewEdits"
@inherits EditReviewBase
@using ThinBlueLie.Bases
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Spinner
@using Syncfusion.Blazor.Buttons
@using ThinBlueLie.Components.Compare
@using static ThinBlueLie.Helper.Extensions.IntExtensions 
@using static ThinBlueLie.Searches.SearchClasses
@attribute [Authorize]

<Title>Edit Review - Thin Blue Lie</Title>
<Meta Name="robots" Content="noindex" />

<div class="mt-3 mx-md-5">
    <SfSidebar Width="160px" Animate="false" EnableGestures="false" Target=".main-content" MediaQuery="(min-width:600px)">
        <ChildContent>
            <div class="main-menu nav-with-bar mt-1">
                <ul class="mt-3 sidebar-profile">
                    <li class="profile-sidebar-link">
                        <NavLink class="nav-link" href="/Account/Profile">Profile</NavLink>
                    </li>
                    <li class="profile-sidebar-link">
                        <NavLink class="nav-link" href="/Account/ReviewEdits">Review Edits</NavLink>
                    </li>
                </ul>
            </div>
        </ChildContent>
    </SfSidebar>
    <div class="main-content">
        <div class="sidebar-content pl-2">
            <div class="d-flex pt-2 justify-content-between border-bottom">
                <div class="" style="font-size:1.2rem;">Edit Review</div>
                <div style="left:47%;" class="position-absolute d-flex align-items-center">
                    <span @onclick="() => GetPreviousEdit()" class="e-icons e-chevron-left"></span>
                    @(PendingEditsCount == 0? 0 : ActiveIdIndex + 1)/@PendingEditsCount
                    <span @onclick="() => GetNextEdit()" class="e-icons e-chevron-right"></span>
                </div>
                @*<div class="d-flex">
                       <InputCheckbox>Display only Changes</InputCheckbox>
                    </div>*@
                <div class="float-right vote-buttons">
                    @if (Loading)
                    {
                        <SfButton CssClass="e-outline e-accept-button" IconCss="e-icons e-check">Accept</SfButton>
                        <SfButton CssClass="e-outline e-decline-button" IconCss="e-icons e-cross">Reject</SfButton>
                    }
                    else if (Ids.Any() && Ids.ToArray()[ActiveIdIndex] != null)
                    {
                        <SfButton CssClass="@("e-outline e-accept-button " + (Ids.ToArray()[ActiveIdIndex].Vote == 1? "active" : ""))"
                                  OnClick="async () => await AcceptEdit()" IconCss="e-icons e-check">
                            @(Ids.ToArray()[ActiveIdIndex].Vote >= 1? "Accepted" : "Accept")
                        </SfButton>
                        <SfButton CssClass="@("e-outline e-decline-button " + (Ids.ToArray()[ActiveIdIndex].Vote == -1? "active" : ""))"
                                  OnClick="async () => await RejectEdit()" IconCss="e-icons e-cross">
                            @(Ids.ToArray()[ActiveIdIndex].Vote <= -1? "Rejected" : "Reject")
                        </SfButton>
                    }
                </div>
            </div>
            <div class="edit-wrapper">
                @if (Loading)
                {
                    <SfSpinner Visible="true" Type="SpinnerType.Material" Label="Loading....">
                    </SfSpinner>
                }
                else if (PendingEditsCount == 0 && Loading == false)
                {
                    <div class="text-center container-fluid">
                        <h3 class="mt-5">There are no current Pending Edits</h3>
                    </div>
                }
                else if (Ids.Any())
                {
                    @if (Ids.ToArray()[ActiveIdIndex].IdTimelineinfo != null)
                    {
                        if (Ids.ToArray()[ActiveIdIndex].IsNewEvent.ToBool() == true)
                        {
                            <div class="text-center my-3"><h5>New Event</h5></div>
                        }
                        <CascadingValue Value="@(Ids.ToArray()[ActiveIdIndex].IsNewEvent.ToBool())">
                            <CompareBasic Info="new Tuple<Timelineinfo, Timelineinfo>(Edits[ActiveIdIndex].Old.Data, Edits[ActiveIdIndex].New.Data)"></CompareBasic>
                            <CompareContext CollapseContent="false" OldContext="@Edits[ActiveIdIndex].Old.Data?.Context" NewContext="@Edits[ActiveIdIndex].New.Data.Context">
                                <Header Context="compare">
                                    <h6 style="padding: 12px; margin: 0px;">
                                        <span class="badge badge-primary">@($"{compare.LineModificationCount} Line Modifications")</span>
                                        <span class="badge badge-danger">@($"{compare.LineDeletionCount} Line Deletions")</span>
                                        <span class="badge badge-success">@($"{compare.LineAdditionCount} Line Additions")</span>

                                        <span class="badge badge-primary">@($"{compare.WordModificationCount} Word Modifications")</span>
                                        <span class="badge badge-danger">@($"{compare.WordDeletionCount} Word Deletions")</span>
                                        <span class="badge badge-success">@($"{compare.WordAdditionCount} Word Additions")</span>
                                    </h6>
                                </Header>
                            </CompareContext>
                            <CompareMedias OldMedias="@Edits[ActiveIdIndex].Old.Medias" NewMedias="@Edits[ActiveIdIndex].New.Medias"></CompareMedias>
                            <CompareOfficers OldOfficers="@Edits[ActiveIdIndex].Old.Officers" NewOfficers="@Edits[ActiveIdIndex].New.Officers"></CompareOfficers>
                            <CompareSubjects OldSubjects="@Edits[ActiveIdIndex].Old.Subjects" NewSubjects="@Edits[ActiveIdIndex].New.Subjects"></CompareSubjects>
                        </CascadingValue>
                    }
                    else if (Ids.Any() && Ids.ToArray()[ActiveIdIndex].IsNewEvent.ToBool() == false)
                    {
                        if ((Edits[ActiveIdIndex].New.OfficerPerson != null || Edits[ActiveIdIndex].Old.OfficerPerson != null))
                        {
                            <ComparePerson TPerson="SimilarOfficer" NewPerson="Edits[ActiveIdIndex].New.OfficerPerson"
                                           OldPerson="Edits[ActiveIdIndex].Old.OfficerPerson"></ComparePerson>
                        }
                        if ((Edits[ActiveIdIndex].New.SubjectPerson != null || Edits[ActiveIdIndex].Old.SubjectPerson != null))
                        {
                            <ComparePerson TPerson="SimilarSubject" NewPerson="Edits[ActiveIdIndex].New.SubjectPerson"
                                           OldPerson="Edits[ActiveIdIndex].Old.SubjectPerson"></ComparePerson>
                        }
                    }
                }
            </div>
        </div>
    </div>
</div>
@code {
    //if user is
}
