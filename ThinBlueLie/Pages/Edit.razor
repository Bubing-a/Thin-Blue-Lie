@page "/Edit"
@inherits EditBase
@using ThinBlueLie.Bases
@using Microsoft.AspNetCore.WebUtilities
@using Syncfusion.Blazor.DropDowns
@using ThinBlueLie.Helper.Extensions
@using ThinBlueLie.Helper
@using Syncfusion.Blazor.RichTextEditor
@using Syncfusion.Blazor.Buttons
@using static ThinBlueLie.Searches.SearchClasses;
@using System.IO
@using Syncfusion.Blazor.Spinner
@using Syncfusion.Blazor.Calendars
@using Microsoft.AspNetCore.Identity
@using DataAccessLibrary.UserModels
@inject UserManager<ApplicationUser> userManager
@inject NavigationManager navManager
@attribute [Authorize]

<Title>Edit Event - Thin Blue Lie</Title>
<Meta Name="robots" Content="noindex" />

@if (EventExists == true && !string.IsNullOrWhiteSpace(id))
{
    <div class="offset-lg-2 row container-fluid mr-0 pr-0" style="margin-bottom:100px;">
        @if (SavingData)
        {
            <div style="z-index: 102; margin-bottom: 100px;">
                <SfSpinner Visible="SavingData" CssClass="e-spin-overlay" />
            </div>
        }
        <EditForm Model="model" OnValidSubmit="HandleValidSubmitAsync">
            <ObjectGraphDataAnnotationsValidator />
            <div class="col-lg-5 col-md-6 border-left border-right border-bottom">
                <div class="d-block mb-0 pt-3 border-bottom mb-2">
                    <h4 class="mb-0 align-te">Information Edit Form</h4>
                </div>
                <div>
                    <div class="form-group">
                        <div id="datepicker-control">
                            <SfDatePicker TValue="DateTime?" @bind-Value="@DateValue" Min="@MinDate" Max="@Today"
                                          Format="yyyy-MM-dd" Placeholder="Select a date" StrictMode="true">
                            </SfDatePicker>
                            <ValidationMessage For="@(() => model.Timelineinfos.Date)"></ValidationMessage>
                        </div>
                    </div>
                </div>
                <div class="form-row">
                    <div class="col-5 dropdown" style="position:relative;">
                        <div class="align">
                            <div class="position-relative mb-1 mb-md-0"> <br /> <label class="position-absolute" style="top:-6px; font-size:14px; line-height:24px;">State</label></div>
                            <SfDropDownList TItem="EnumExtensions.ListItem" TValue="TimelineinfoEnums.StateEnum?" PopupHeight="230px"
                                            Placeholder="State" @bind-Value="@model.Timelineinfos.State" DataSource="@States">
                                <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
                            </SfDropDownList>
                            <ValidationMessage For="@(() => model.Timelineinfos.State)"></ValidationMessage>
                        </div>
                    </div>
                    <div class="col-7">
                        <SfTextBox CssClass="e-filled" Placeholder="City" FloatLabelType="@FloatLabelType.Always"
                                   @bind-Value="model.Timelineinfos.City"
                                   HtmlAttributes="@StaticHelper.AutoCompleteOff">
                        </SfTextBox>
                        <ValidationMessage For="@(() => model.Timelineinfos.City)"></ValidationMessage>
                    </div>
                </div>
                <div class="w-100 pt-3">
                    <SfTextBox CssClass="e-filled" Placeholder="Title" FloatLabelType="@FloatLabelType.Always" @bind-Value="model.Timelineinfos.Title"></SfTextBox>
                    <ValidationMessage For="@(() => model.Timelineinfos.Title)"></ValidationMessage>
                </div>
                <hr />
                <div class="d-flex">
                    <h6 class="d-inline">
                        Fill out the following information for the Subject
                    </h6>
                    <div class="d-inline ml-auto" @onclick="AddSubject" @onclick:stopPropagation="false" @onclick:preventDefault>
                        <SfButton IconCss="e-btn-sb-icons e-add-icon" CssClass="e-small e-flat float-right" IsPrimary="true" IconPosition=@IconPosition.Right>
                            Subject
                        </SfButton>
                    </div>
                </div>
                <div id="SubjectList">
                    @foreach ((var subject, Int32 i) in model.Subjects.Select((subject, i) => (subject, i)))
                    {
                        <Subject subject="subject" DeleteSubject="DeleteSubject" SuggestSubjects="SuggestSubjects"></Subject>
                        if (SimilarSubjects[i] != null)
                        {
                            <SimilarPeople PersonRank="i" SetSameAs="SetSameAsSubject" People="SimilarSubjects[i]"></SimilarPeople>
                        }
                    }
                </div>
                <hr />
                <div class="d-flex">
                    <h6 class="d-inline">
                        Fill out the following information for the Officer
                    </h6>
                    <div class="d-inline ml-auto" @onclick="AddOfficer" @onclick:stopPropagation="false" @onclick:preventDefault>
                        <SfButton IconCss="e-btn-sb-icons e-add-icon" CssClass="e-small e-flat float-right" IsPrimary="true" IconPosition=@IconPosition.Right>
                            Officer
                        </SfButton>
                    </div>
                </div>
                <div id="OfficerList">
                    @foreach ((var officer, Int32 i) in model.Officers.Select((officer, i) => (officer, i)))
                    {
                        <Officer isSubmit="false" officer="officer" DeleteOfficer="DeleteOfficer" SuggestOfficers="SuggestOfficers"></Officer>
                        if (SimilarOfficers[i] != null)
                        {
                            <SimilarPeople PersonRank="i" SetSameAs="SetSameAsOfficer" People="SimilarOfficers[i]"></SimilarPeople>
                        }
                    }
                </div>
                <hr />
                <div class="form-group">
                    <label asp-for="Timelineinfos.Context" class="control-label">Use this section to fill in information about context around the event in the video. This could be things such as it being part of protests, the victim was previously detained, and anything related to the event that happened off-screen.</label>
                    <SfRichTextEditor CssClass="w-100" @bind-Value="@model.Timelineinfos.Context" EnableResize="true" EnableHtmlSanitizer="true" ShowCharCount="true">
                        <RichTextEditorPasteCleanupSettings></RichTextEditorPasteCleanupSettings>
                        <RichTextEditorToolbarSettings Items="@Tools"></RichTextEditorToolbarSettings>
                    </SfRichTextEditor>
                    <ValidationMessage For="@(() => model.Timelineinfos.Context)"></ValidationMessage>
                </div>
                <div class="form-group">
                    <button id="submit" type="submit" class="btn btn-primary">Submit</button>
                    <a asp-page="/Index" style="float:right">Back to Home</a>
                </div>
            </div>
            <div class="col-lg-5 col-md-6">
                <div class="row">
                    <div class="d-block border-top container-fluid border-bottom" @onclick:stopPropagation="false" @onclick:preventDefault>
                        <h4 class="pt-2">Add Media</h4>
                        <p class="mb-0" style="font-size:1em">
                            Add Media relavent to the event:
                        </p>
                    </div>
                    <div id="MediaList" class="container-fluid">
                        <CascadingValue Value="true">
                            <MediaAccordion Medias="model.Medias" AddMedia="AddMedia" DeleteMedia="DeleteMedia" MoveMediaDown="MoveMediaDown" MoveMediaTop="MoveMediaTop" MoveMediaUp="MoveMediaUp">
                            </MediaAccordion>
                        </CascadingValue>
                    </div>
                </div>
            </div>
        </EditForm>
    </div>
}
else if (model.Timelineinfos.Locked == 1 && (User.RepAuthorizer(PrivilegeEnum.Privileges.EditLocked) == false))
{
    <div class="container text-center container-fluid mt-5">
        <h4>How did you get here? You need the <a href="/About/Reputation">"Edit Locked Posts"</a> privilege to edit this post</h4>
    </div>
}
else if (!string.IsNullOrWhiteSpace(id) && EventExists == false)
{
    <div class="container text-center container-fluid mt-5">
        <h4>Opps, this is not a valid url</h4>
    </div>
}
else if (EventPendingEdit)
{
    <div class="container text-center container-fluid mt-5">
        <h4>This Event currently has a pending edit and cannot be editted</h4>
        <h5>In the future we will allow users to edit a pending edit</h5>
    </div>
}
else
{
<div class="mt-2 container">
    <div style="z-index: 102; margin-bottom: 100px;">
        <SfSpinner Visible="SavingData" CssClass="e-spin-overlay" />
    </div>
</div>
}



@code {
    string id;
    [CascadingParameter]
    private Task<AuthenticationState> _authState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var uri = new Uri(navManager.Uri);
        id = QueryHelpers.ParseQuery(uri.Query).TryGetValue("id", out var type) ? type.First() : "";
        if (!string.IsNullOrWhiteSpace(id))
        {
            Id = Convert.ToUInt32(id);
            userState = await _authState;
            User = await userManager.GetUserAsync(userState.User);
            model = await FetchDataAsync();
            if (model.Officers != null)
            {
                for (int i = 0; i < model.Officers.Count; i++)
                {
                    SimilarOfficers.Add(new List<SimilarPersonGeneral> { });
                };
                for (int i = 0; i < model.Subjects.Count; i++)
                {
                    SimilarSubjects.Add(new List<SimilarPersonGeneral> { });
                };

                DateValue = Convert.ToDateTime(model.Timelineinfos.Date);
                this.StateHasChanged();
            }
        }
    }
}
