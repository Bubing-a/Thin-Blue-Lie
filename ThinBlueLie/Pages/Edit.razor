@page "/Edit"
@inherits EditBase
@using ThinBlueLie.Bases
@using Microsoft.AspNetCore.WebUtilities
@using Syncfusion.Blazor.DropDowns
@using ThinBlueLie.Helper.Extensions
@using ThinBlueLie.Helper
@using Syncfusion.Blazor.RichTextEditor
@using Syncfusion.Blazor.Buttons
@using static ThinBlueLie.Searches.SearchClasses;
@using System.IO
@using Syncfusion.Blazor.Spinner
@using Syncfusion.Blazor.Calendars
@using Microsoft.AspNetCore.Identity
@using DataAccessLibrary.UserModels
@inject UserManager<ApplicationUser> userManager
@inject NavigationManager navManager
@inject IJSRuntime JS
@attribute [Authorize]

<Title>Edit Event - Thin Blue Lie</Title>
<Meta Name="robots" Content="noindex" />


<style>
    body {
        overflow-x: hidden;
    }

    form {
        display: inherit;
    }
</style>
@if (EventExists == true && !string.IsNullOrWhiteSpace(id))
{
    <div class="offset-xl-2 d-lg-flex d-block container-fluid px-1 px-md-5 px-sm-3 pl-lg-2 mr-lg-0 pr-lg-0" style="margin-bottom:100px;">
        @if (SavingData)
        {
            <div style="z-index: 102; margin-bottom: 100px;">
                <SfSpinner Visible="SavingData" CssClass="e-spin-overlay" />
            </div>
        }
        <EditForm Model="model" OnValidSubmit="HandleValidSubmitAsync">
            <ObjectGraphDataAnnotationsValidator />
            <div class="col-xl-5 col-lg-6 col-12 border">
                <div class="d-block mb-0 pt-3 border-bottom mb-2">
                    <h4 class="mb-0 d-flex justify-content-between">
                        Information Edit Form
                        <a href="/About/Submission-Guide" class="d-flex align-items-center">
                            <span style="font-size:smaller" class="pr-2">Guide</span>
                            <i data-feather="help-circle"></i>
                        </a>
                    </h4>
                </div>
                <div id="basicInfo">
                    <div class="form-group">
                        <div id="datepicker-control">
                            <SfDatePicker TValue="DateTime?" @bind-Value="@DateValue" Min="@MinDate" Max="@Today"
                                          Format="yyyy-MM-dd" Placeholder="Select a date" StrictMode="true">
                            </SfDatePicker>
                            <ValidationMessage For="@(() => model.Timelineinfos.Date)"></ValidationMessage>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="col-5 dropdown" style="position:relative;">
                            <div class="align">
                                <div class="position-relative mb-md-0"> <br /> <label class="position-absolute" style="top:-6px; font-size:14px; line-height:24px;">State</label></div>
                                <SfDropDownList TItem="EnumExtensions.ListItem" TValue="TimelineinfoEnums.StateEnum?" PopupHeight="230px"
                                                Placeholder="State" @bind-Value="@model.Timelineinfos.State" DataSource="@States">
                                    <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
                                </SfDropDownList>
                                <ValidationMessage For="@(() => model.Timelineinfos.State)"></ValidationMessage>
                            </div>
                        </div>
                        <div class="col-7">
                            <SfTextBox CssClass="e-filled" Placeholder="City" FloatLabelType="@FloatLabelType.Always"
                                       @bind-Value="model.Timelineinfos.City"
                                       HtmlAttributes="@StaticHelper.AutoCompleteOff">
                            </SfTextBox>
                            <ValidationMessage For="@(() => model.Timelineinfos.City)"></ValidationMessage>
                        </div>
                    </div>
                    <div class="w-100 pt-3">
                        <SfTextBox CssClass="e-filled" Placeholder="Title" FloatLabelType="@FloatLabelType.Always" @bind-Value="model.Timelineinfos.Title"></SfTextBox>
                        <ValidationMessage For="@(() => model.Timelineinfos.Title)"></ValidationMessage>
                    </div>
                </div>
                <hr />
                <div class="d-flex">
                    <h6 class="d-inline">
                        Fill out the following information for the Subject
                    </h6>
                    <div class="d-inline ml-auto" @onclick="AddSubject" @onclick:stopPropagation="false" @onclick:preventDefault>
                        <SfButton IconCss="e-btn-sb-icons e-add-icon" CssClass="e-small e-flat float-right" IsPrimary="true" IconPosition=@IconPosition.Right>
                            Subject
                        </SfButton>
                    </div>
                </div>
                <div id="SubjectList">
                    @foreach ((var subject, Int32 i) in model.Subjects.Select((subject, i) => (subject, i)))
                    {
                        <Subject subject="subject" DeleteSubject="DeleteSubject" SuggestSubjects="SuggestSubjects"></Subject>
                        if (SimilarSubjects[i] != null)
                        {
                            <SimilarPeople PersonRank="i" SetSameAs="SetSameAsSubject" People="SimilarSubjects[i]"></SimilarPeople>
                        }
                    }
                </div>
                <hr />
                <div class="d-flex">
                    <h6 class="d-inline">
                        Fill out the following information for the Officer
                    </h6>
                    <div class="d-inline ml-auto" @onclick="AddOfficer" @onclick:stopPropagation="false" @onclick:preventDefault>
                        <SfButton IconCss="e-btn-sb-icons e-add-icon" CssClass="e-small e-flat float-right" IsPrimary="true" IconPosition=@IconPosition.Right>
                            Officer
                        </SfButton>
                    </div>
                </div>
                <div id="OfficerList">
                    @foreach ((var officer, Int32 i) in model.Officers.Select((officer, i) => (officer, i)))
                    {
                        <Officer isSubmit="false" officer="officer" DeleteOfficer="DeleteOfficer" SuggestOfficers="SuggestOfficers"></Officer>
                        if (SimilarOfficers[i] != null)
                        {
                            <SimilarPeople PersonRank="i" SetSameAs="SetSameAsOfficer" People="SimilarOfficers[i]"></SimilarPeople>
                        }
                    }
                </div>                
                <div class="form-group border-top mt-3 pt-2" id="context">
                    <h6>
                        Context: Detailed information about the event.
                    </h6>
                    <SfRichTextEditor CssClass="w-100" @bind-Value="@model.Timelineinfos.Context" EnableResize="true" EnableHtmlSanitizer="true" ShowCharCount="true">
                        <RichTextEditorPasteCleanupSettings></RichTextEditorPasteCleanupSettings>
                        <RichTextEditorToolbarSettings Items="@Tools"></RichTextEditorToolbarSettings>
                    </SfRichTextEditor>
                    <ValidationMessage For="@(() => model.Timelineinfos.Context)"></ValidationMessage>
                </div>
                <div class="form-group">
                    <button id="submit" type="submit" class="btn btn-primary">Submit</button>
                    <a href="/Index" style="float:right">Back to Home</a>
                </div>
            </div>
            <div class="col-xl-5 col-lg-6 d-none d-lg-block" id="otherColumn">
                <div class="row" id="addMedia">
                    <div class="d-block border-top container-fluid border-bottom" @onclick:stopPropagation="false" @onclick:preventDefault>
                        <h4 class="pt-2">Add Media</h4>
                        <p class="mb-0" style="font-size:1em">
                            Add Media relevant to the event:
                        </p>
                    </div>
                    <div id="MediaList" class="container-fluid px-0">
                        <CascadingValue Value="true">
                            <MediaAccordion Medias="model.Medias" AddMedia="AddMedia" DeleteMedia="DeleteMedia" MoveMediaDown="MoveMediaDown" MoveMediaTop="MoveMediaTop" MoveMediaUp="MoveMediaUp">
                            </MediaAccordion>
                        </CascadingValue>
                    </div>
                </div>
            </div>
        </EditForm>
    </div>
}
else if (model.Timelineinfos.Locked == 1 && (User.RepAuthorizer(PrivilegeEnum.Privileges.EditLocked) == false))
{
    <div class="container text-center container-fluid mt-5">
        <h4>How did you get here? You need the <a href="/About/Reputation">"Edit Locked Posts"</a> privilege to edit this post</h4>
    </div>
}
else if (!string.IsNullOrWhiteSpace(id) && EventExists == false)
{
    <div class="container text-center container-fluid mt-5">
        <h4>Opps, this is not a valid url</h4>
    </div>
}
else if (EventPendingEdit)
{
    <div class="container text-center container-fluid mt-5">
        <h4>This Event currently has a pending edit and cannot be editted</h4>
        <h5>In the future we will allow users to edit a pending edit</h5>
    </div>
}
else
{
    <div class="mt-2 container">
        <div style="z-index: 102; margin-bottom: 100px;">
            <SfSpinner Visible="SavingData" CssClass="e-spin-overlay" />
        </div>
    </div>
}



@code {
    string id;
    [CascadingParameter]
    private Task<AuthenticationState> _authState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var uri = new Uri(navManager.Uri);
        id = QueryHelpers.ParseQuery(uri.Query).TryGetValue("id", out var type) ? type.First() : "";
        if (!string.IsNullOrWhiteSpace(id))
        {
            Id = Convert.ToUInt32(id);
            userState = await _authState;
            User = await userManager.GetUserAsync(userState.User);
            model = await FetchDataAsync();
            if (model.Officers != null)
            {
                for (int i = 0; i < model.Officers.Count; i++)
                {
                    SimilarOfficers.Add(new List<SimilarPersonGeneral> { });
                };
                for (int i = 0; i < model.Subjects.Count; i++)
                {
                    SimilarSubjects.Add(new List<SimilarPersonGeneral> { });
                };

                DateValue = Convert.ToDateTime(model.Timelineinfos.Date);
                this.StateHasChanged();
            }
        }
    }
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            await JS.InvokeVoidAsync("MakeMobileFriendly");
        }
        else
        {
            await JS.InvokeVoidAsync("feather.replace");
        }
    }
}
