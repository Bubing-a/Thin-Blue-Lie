@using static ThinBlueLie.Models.TimelineinfoEnums;
@using static ThinBlueLie.Models.EnumExtensions; 
@model ThinBlueLie.Pages.TimelineModel
@{
    ViewBag.Title = "Timeline";
    var Event = ViewData["Timelineinfo"] as IList<ThinBlue.Timelineinfo>;
}

<style>
    .indent {
        text-indent: 4rem;
    }
    .context {
        font-size: 1.1rem;
    }
    .brokencard {
        border: none;
    }

    card.header {
        font-size: 1rem;
    }

    hr.blueline {
        border: none;
        height: 2px;
        /* Set the hr color */
        color: #314DB2; /* old IE */
        background-color: #314DB2; /* Modern Browsers */
    }

    .timeline-label {
        position: absolute !important;
        top: -25px !important;
        text-align: center;
        padding: 0px;
        margin: 0px;
        left: 0px;
        width: 100%;
    }

    #triangle-left {
        width: 0;
        height: 0;
        border-top: 16px solid transparent;
        border-right: 30px solid black;
        border-bottom: 15px solid transparent;
        margin-right: 0.4rem;
        position: relative;
        cursor: pointer;
    }

    #triangle-left .empty {
        left: 10px;
        width: 0;
        height: 0;
        border-top: 11px solid transparent;
        border-right: 20px solid white;
        border-bottom: 11px solid transparent;
        left: 7px;
        position: absolute;
        top: -12px;
        content: '';
    }

    #triangle-right {
        width: 0;
        height: 0;
        border-top: 16px solid transparent;
        border-left: 30px solid black;
        border-bottom: 15px solid transparent;
        margin-left: 0.4rem;
        cursor: pointer;
        position: relative;
    }

    #triangle-right .empty {
        width: 0;
        height: 0;
        border-top: 11px solid transparent;
        border-left: 20px solid white;
        border-bottom: 11px solid transparent;
        position: absolute;
        left: -27px;
        top: -12px;
        content: '';
    }    

    .btn.week.focus, .btn.week.active {
        box-shadow: none;
        outline: #919191 solid 3px;
    }

    .btn {
        cursor: pointer;
    }
    .thick {
        height:31px !important;
    }
</style>
<body onresize="loadTimes()">
    <div style="position:relative;" class="container-fluid mt-4 mb-1 text-center d-block">
        <!-- <div   This draws that "Timeline" idk man, it kinda looks better without it.
             id="imposedline" style="width:80%; border-top: 1px solid black;" class="pt-0 mt-0">
        </div> -->
        <div id="calendarDiv" class="text-left container">
            <div class="divcalendar nogap mb-3 mx-auto">
                <div id="calendaroverallcontrols">
                    <!-- <div id="year"></div> -->
                    <div id="calendarmonthcontrols">
                        <a id="btnPrevYr" href="javascript:void();" title="Previous Year"><span><<</span></a>
                        <a id="btnPrev" href="javascript:void();" title="Previous Month"><span><</span></a>
                        <!-- <input type="button" src="images/btnprevmonth.png" alt="Submit" id="btnPrev"/>-->
                        <!-- <div id="month"></div>-->
                        <div id="monthandyear"></div>
                        <!--<input type="button" src="images/btnnextmonth.png" alt="Submit" id="btnNext"/>-->
                        <a id="btnNext" href="javascript:void();" title="Next Month"><span>></span></a>
                        <a id="btnNextYr" href="javascript:void();" title="Next Year"><span>>></span></a>
                    </div>
                </div>
                <div id="divcalendartable"></div>
            </div>
        </div>  @*Timeline*@
        <div class="row">
            <div style="" id="timelineDiv" class="btn-group btn-group-toggle my-auto col-lg-9 ml-md-5 pl-md-5" data-toggle="buttons">
                <div onclick="PrevWeek()" id="triangle-left"> <div class="empty"></div></div>
                <label id="Timeline-label0" class="week btn thick">
                    <span id="Timeline-Day0" class="timeline-label"></span>
                    <input type="radio" alt="Sunday" id="option1">
                </label>
                <label id="Timeline-label1" class="week btn thick">
                    <span id="Timeline-Day1" class="timeline-label"></span>
                    <input type="radio" name="options" alt="Monday" id="option2">
                </label>
                <label id="Timeline-label2" class="week btn thick">
                    <span id="Timeline-Day2" class="timeline-label"></span>
                    <input type="radio" name="options" alt="Tuesday" id="option3">
                </label>
                <label id="Timeline-label3" class="week btn thick">
                    <span id="Timeline-Day3" class="timeline-label"></span>
                    <input type="radio" name="options" alt="Wednesday" id="option4">
                </label>
                <label id="Timeline-label4" class="week btn thick">
                    <span id="Timeline-Day4" class="timeline-label"></span>
                    <input type="radio" name="options" alt="Thursday" id="option5">
                </label>
                <label id="Timeline-label5" class="week btn thick">
                    <span id="Timeline-Day5" class="timeline-label"></span>
                    <input type="radio" name="options" alt="Friday" id="option6">
                </label>
                <label id="Timeline-label6" class="week btn thick">
                    <span id="Timeline-Day6" class="timeline-label"></span>
                    <input type="radio" name="options" alt="Saturday" id="option7">
                </label>
                <div onclick="NextWeek()" id="triangle-right"><div class="empty"></div></div>
            </div> @*Format Select*@
            <div style="" class="col-lg-2 col-6 d-inline-block container pl-0">
                <div id="format-select" style="float:right;" class="input-group mb-1">
                    <div class="mx-auto mt-1">
                        <a id="showWeekButton" onclick="showWeek()" class="btn btn-outline-info">Week</a>
                        <a id="showMonthButton" onclick="showMonth()" class="btn btn-outline-info">Month</a>
                    </div>
                </div>  @*Date Search*@
                <br />
                <div style="" class="input-group mb-2">
                    <input type="number" id="InputMonth" min="0" max="12" class="form-control" placeholder="MM" aria-label="Month">
                    <input type="number" id="InputYear" min="1" max="31" class="form-control" placeholder="DD" aria-label="Day">
                    <input type="number" id="InputYear" min="1930" max="2020" class="form-control" placeholder="YYYY" aria-label="Year">
                    <div class="input-group-append">
                        <button class="btn btn-outline-success" type="button">Search</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    @if (Event.Count == 0)
    {
        <div class="container mt-2 text-center">
            <h3>There are no events recorded for this day yet</h3>
            <h5>If you know about an event on this date, please record it by submitting the info:</h5>
            <a style="font-size: 2rem;" class="btn btn-success mr-md-2 mb-md-0 mb-2 text-nowrap" href="/Submit">Submit Info</a>
        </div>
    }
    @*@if (Event.Count > 1)
    {
        <div class="container w-25">
            <div class="btn-group mb-1" role="group" aria-label="Select Event">
                <h5 class="mb-0 mr-1 mt-1">Event:</h5>
                @foreach ((var value, Int32 i) in Event.Select((value, i) => (value, i+1))) {
                <button onclick="ScrollToEvent()" type="button" class="btn btn-outline-primary px-3">@i</button>
               }
            </div>
        </div>*@
    }
    @foreach (var Timelineinfo in Event)
    {
        <div class="row">
            @*Video*@
            <div style="vertical-align:top;" class="h-100 d-inline-block col-md-8 offset-md-1">
                <div style="border-radius:3px; width:100%; border: 1px solid #000000 !important;" class="embed-responsive embed-responsive-2by1 d-inline-block">
                    <iframe class="embed-responsive-item"
                            src="https://www.youtube.com/embed/WNKF8rbl2uA" allowfullscreen>
                    </iframe>
                </div>
            </div>
            @*Information Card*@
            <div class="col-md-2 mx-auto mx-md-0 p-md-0" style="max-width:400px;">
                <div class="dataCard card border-dark mb-3 w-100" style="min-width:175px;">
                    <div class="card-header text-black"><strong>Data</strong></div>
                    <div class="card-body text-dark pb-0">
                        <h5 class="card-title mb-0">General Information</h5>
                        <hr class="mt-0 pb-0 mb-0 pt-0" />
                        <span class="d-none eventId">@Timelineinfo.IdTimelineInfo</span>
                        <ul class="list-group list-group-flush">
                            <li class="brokencard list-group-item">
                                <p><strong>Location:</strong> @Timelineinfo.City, @GetEnumDisplayName((StateEnum)Timelineinfo.State)</p>
                                <p><strong>Source:</strong></p>
                                <p><strong>Credit:</strong></p>
                            </li>
                        </ul>
                        <h5 class="card-title text-left mb-0">Officer's Information</h5>
                        <hr style="height:1px;" class="mt-0 pb-0 mb-0 pt-0" />
                        <ul class=" list-group list-group-flush">
                            <li class="brokencard list-group-item">
                                <p><strong>Name:</strong> @Timelineinfo.OfficerName</p>
                                <p><strong>Sex:</strong> @Enum.GetName(typeof(SexEnum), Timelineinfo.OfficerSex)</p>
                                <p><strong>Race:</strong> @Enum.GetName(typeof(RaceEnum), Timelineinfo.OfficerRace)</p>
                                @*Have little label/tags for "violence" "harrassment" "negligence" "evidence planting"*@
                            </li>
                        </ul>
                        <h5 class="card-title text-left mb-0">Victim's Information</h5>
                        <ul class="list-group list-group-flush">
                            <li class="list-group-item ">
                                <p><strong>Name:</strong> @Timelineinfo.SubjectName</p>
                                <p><strong>Sex:</strong> @Enum.GetName(typeof(SexEnum), Timelineinfo.SubjectSex)</p>
                                <p><strong>Race:</strong> @Enum.GetName(typeof(RaceEnum), Timelineinfo.SubjectRace)</p>
                                <p><strong>Armed:</strong> @Enum.GetName(typeof(ArmedEnum), Timelineinfo.Armed) </p>                                
                            </li>
                        </ul>
                    </div>
                    <div class="card-footer">
                        <div class="row">
                            <div class="col-6 px-0 offset-1">
                                <a class="btn btn-primary position-relative" href="/Edit" data-placement="top"
                                   data-toggle="tooltip" title="Edit info">
                                    Incorrect Info?
                                </a>
                            </div>
                            <div class="col-5 px-0">                                
                                <a tabindex="0" class="btn btn-danger position-relative flag" data-placement="top" role="button" data-html="true" data-toggle="popover" data-trigger="click" title="Report"
                                   data-content='@await Html.PartialAsync("Shared/_FlagPartial.cshtml")'>
                                   Flag ⚐
                                </a>                               
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div href="#divider" id="event2">
            <h5 style="margin-left: 8rem; font-size:30px; font-family: Cambira;" class="mt-2 mb-0"> <strong>Context and Followup</strong></h5>
            <div class="border mb-3" style="min-height:100px;">
                <p style="margin-left: 8rem; margin-right: 15rem;" class="context indent">@Timelineinfo.Context</p>
            </div>
        </div>        
    }
</body>
<script>
    $(document).ready(function () { //enables popover
        $('[data-toggle="popover"]').popover({
            container: 'body',
            sanitize: false,
        })
        $('[data-toggle="tooltip"]').tooltip();
    });

    @*$('.submit').click(function (e) {
       
        //@Url.Action("Flag", "Timeline", new { id = Model.Flags.IdTimelineInfo });

        //You want to use event handlers to on form submit find the parent function's eventid and pass it to flag in controller.
        //You don't need to use url, it is a post, it will find it.
    });*@
    $(document).ready(function () { //enables popover
        $('.flag').click(function (e) {
            var id = $(this).parents(".dataCard").find(".eventId").html();
            console.log(id)
            $('.submitFlag').click(function (e) {
                $(this).parents(".flagPopover").find(".idTimelineInput").html(id);  
                //var flagSuccess = $(this).parents.$(".flagPopover").html("test");
                var flagSuccess = $(this).parents.$(".flagPopover").attr('data-content', "test").data('bs.popover');
                flagSuccess.$tip.addClass(popover.options.placement);
               // $(this).parents(".flagPopover").find("form").submit();


                //You want to use event handlers to on form submit find the parent function's eventid and pass it to flag in controller.
                //You don't need to use url, it is a post, it will find it.
            });
        });
    });




    @*$.ajax({
        url: '@Url.Action("GetFlagView","Timeline")',
        success: function (result) {
            $('#popoverNavLink').popover({
                content: result,
                trigger: 'click',
                html: true,
                animation: false
            })
        }
    });*@

    document.getElementById("Timeline").classList.add("onpage");

    var weekDays = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
    //function loadDays() {
    //var weekDays = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]

    if (window.matchMedia("(min-width: 768px)").matches) {
        for (i = 0; i < 7; ++i)
            document.getElementById("Timeline-Day" + i).innerHTML += weekDays[i] + " ";
    }

    var first = -0xFFFFFFFF;
    var m = new Array(7);
    var d = new Array(7);
    var y = new Array(7);
    var day = new Array(7);

   function PrevWeek() {
        first = parseInt(first) - 7;
        UpdateDays();
    }
    function NextWeek() {
        first = parseInt(first) + 7;
        UpdateDays();
    }
    function getCookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
            var c = ca[i];
            while (c.charAt(0) == ' ') {
                c = c.substring(1);
            }
            if (c.indexOf(name) == 0) {
                return c.substring(name.length, c.length);
            }
        }
        return "";
    }
    function RestoreDate() { //load cookie data into variable "first"
        var x = parseInt(getCookie("savedFirst"));
        if (Number.isNaN(x) == false) {
            first = x;
        }
    }
    RestoreDate();

    function UpdateDays() {
        var curr = new Date(); // get current date
        if (first == -0xFFFFFFFF) { //if there is no value for first stored, make first the first day of the current week
            first = curr.getDate() - curr.getDay(); // First day is the day of the month - the day of the week
        }
        var last = first + 6; // last day is the first day + 6

        day[0] = new Date(curr.setDate(first));
        for (i = 1; i < 7; i++) { //This for loop creates the time info for each day with the following loop pulls the month and date out of
            day[i] = new Date(curr.setDate(curr.getDate() + 1));
        }


        for (let i = 0; i < 7; i++) { //This for loop adds the date onto the end of the day using arrays
            m[i] = day[i].getMonth() + 1;
            d[i] = day[i].getDate();
            y[i] = day[i].getYear() + 1900;
            document.getElementById("Timeline-Day" + i).innerHTML = weekDays[i] + " " + m[i] + "/" + d[i];

            var current = new Date();
            if (day[i] > current) {
                document.getElementById("Timeline-label" + i).classList.add("disabled");
                document.getElementById("Timeline-label" + i).style.pointerEvents = "none";
                document.getElementById("Timeline-label" + i).style.color = "green";
            }
            else {
                document.getElementById("Timeline-label" + i).classList.remove("disabled");
                document.getElementById("Timeline-label" + i).style.pointerEvents = "auto";
                document.getElementById("Timeline-label" + i).style.color = "blue";
            }

            //Pad month and day to always be two places
            if (m[i] <= 100) { m[i] = ("0" + m[i]).slice(-2) }
            if (d[i] <= 100) { d[i] = ("0" + d[i]).slice(-2) }
            //Change query string on button click
            document.getElementById("Timeline-label" + i).onclick = function () { location.href = "?d=" + y[i] + "-" + m[i] + "-" + d[i]; };
            document.cookie = "savedFirst=" + first
        }
    }
    UpdateDays();

    function loadTimes() {
        for (i = 0; i < 7; i++) {
            m[i] = day[i].getMonth() + 1;
            d[i] = day[i].getDate();
            y[i] = day[i].getYear() + 1900;
            if (document.getElementById("Timeline-Day" + i).innerHTML == m[i] + "/" + d[i] && window.matchMedia("(min-width: 768px)").matches) {
                document.getElementById("Timeline-Day" + i).innerHTML = weekDays[i] + " " + m[i] + "/" + d[i];
            }
            if (document.getElementById("Timeline-Day" + i).innerHTML == weekDays[i] + " " + m[i] + "/" + d[i] && window.matchMedia("(max-width: 767px)").matches) {
                document.getElementById("Timeline-Day" + i).innerHTML = m[i] + "/" + d[i];
            }
        }
    }


</script>
<script>
    document.getElementById("calendarDiv").style.display = "none";
    document.getElementById("showWeekButton").classList.add("active");

    function showMonth() {
        var x = document.getElementById("calendarDiv");
        if (x.style.display === "none") {
            x.style.display = "inline-block";
            document.getElementById("timelineDiv").style.display = "none";
            document.getElementById("showMonthButton").classList.add("active");
            document.getElementById("showWeekButton").classList.remove("active");
        }
    }

    function showWeek() {
        var x = document.getElementById("timelineDiv");
        if (x.style.display === "none") {
            x.style.display = "inline-flex";
            document.getElementById("calendarDiv").style.display = "none";
            document.getElementById("showWeekButton").classList.add("active");
            document.getElementById("showMonthButton").classList.remove("active");
        }
    }

</script>
<script>
    var Calendar = function (o) {
        //Store div id
        this.divId = o.ParentID;

        // Days of week, starting on Sunday
        this.DaysOfWeek = o.DaysOfWeek;
        // Months, stating on January
        this.Months = o.Months;
        // Set the current month, year
        var d = new Date();
        this.CurrentMonth = d.getMonth();
        this.CurrentYear = d.getFullYear();

        var f = o.Format;

        if (typeof (f) == 'string') {
            this.f = f.charAt(0).toUpperCase();
        } else {
            this.f = 'M';
        }

    };

    // Goes to next month
    Calendar.prototype.nextMonth = function () {

        if (this.CurrentMonth == 11) {

            this.CurrentMonth = 0;
            this.CurrentYear = this.CurrentYear + 1;

        } else {

            this.CurrentMonth = this.CurrentMonth + 1;

        }

        this.showCurrent();
    };

    // Goes to previous month
    Calendar.prototype.previousMonth = function () {

        if (this.CurrentMonth == 0) {

            this.CurrentMonth = 11;
            this.CurrentYear = this.CurrentYear - 1;

        } else {

            this.CurrentMonth = this.CurrentMonth - 1;

        }

        this.showCurrent();
    };

    // 
    Calendar.prototype.previousYear = function () {

        this.CurrentYear = this.CurrentYear - 1;

        this.showCurrent();
    }

    // 
    Calendar.prototype.nextYear = function () {
        console.log(" ");

        console.log("Calendar.prototype.nextYear = function() {");

        console.log("this.CurrentYear == " + this.CurrentYear);

        this.CurrentYear = this.CurrentYear + 1;

        console.log("this.CurrentYear - 1 i.e. this.CurrentYear == " + this.CurrentYear);

        this.showCurrent();
    }

    // Show current month
    Calendar.prototype.showCurrent = function () {

        this.Calendar(this.CurrentYear, this.CurrentMonth);

    };

    // Show month (year, month)
    Calendar.prototype.Calendar = function (y, m) {

        typeof (y) == 'number' ? this.CurrentYear = y : null;

        typeof (y) == 'number' ? this.CurrentMonth = m : null;


        // 1st day of the selected month
        var firstDayOfCurrentMonth = new Date(y, m, 1).getDay();

        // Last date of the selected month
        var lastDateOfCurrentMonth = new Date(y, m + 1, 0).getDate();

        // Last day of the previous month
        var lastDateOfLastMonth = m == 0 ? new Date(y - 1, 11, 0).getDate() : new Date(y, m, 0).getDate();

        // Write selected month and year. This HTML goes into <div id="month"></div>
        var monthandyearhtml = '<span id="monthandyearspan">' + this.Months[m] + ' - ' + y + '</span>';

        var html = '<table>';

        // Write the header of the days of the week
        html += '<tr>';

        for (var i = 0; i < 7; i++) {

            html += '<th class="daysheader">' + this.DaysOfWeek[i] + '</th>';
        }

        html += '</tr>';




        var p = dm = this.f == 'M' ? 1 : firstDayOfCurrentMonth == 0 ? -5 : 2;

        var cellvalue;

        for (var d, i = 0, z0 = 0; z0 < 6; z0++) {
            html += '<tr>';

            for (var z0a = 0; z0a < 7; z0a++) {

                d = i + dm - firstDayOfCurrentMonth;

                // Dates from prev month
                if (d < 1) {

                    cellvalue = lastDateOfLastMonth - firstDayOfCurrentMonth + p++;

                    html += '<td id="prevmonthdates">' +
                        '<span id="cellvaluespan">' + (cellvalue) + '</span>' +
                        '</td>';

                    // Dates from next month
                } else if (d > lastDateOfCurrentMonth) {

                    html += '<td id="nextmonthdates">' + (p++) + '</td>';

                    // Current month dates
                } else {
                    html += '<td id="currentmonthdates" onclick="function () { location.href = "?d=" + this.CurrentYear + "-" + this.CurrentMonth + "-" + (cellvalue); }">' + (d) + '</td>';

                    p = 1;

                }

                if (i % 7 == 6 && d >= lastDateOfCurrentMonth) {

                    z0 = 10; // no more rows
                }

                i++;

            }

            html += '</tr>';
        }

        // Closes table
        html += '</table>';


        document.getElementById("monthandyear").innerHTML = monthandyearhtml;

        document.getElementById(this.divId).innerHTML = html;
    };

    // On Load of the window
    window.onload = function () {

        // Start calendar
        var c = new Calendar({
            ParentID: "divcalendartable",

            DaysOfWeek: [
                'MON',
                'TUE',
                'WED',
                'THU',
                'FRI',
                'SAT',
                'SUN'
            ],

            Months: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],

            Format: 'dd/mm/yyyy'
        });

        c.showCurrent();

        // Bind next and previous button clicks
        getId('btnPrev').onclick = function () {
            c.previousMonth();
        };

        getId('btnPrevYr').onclick = function () {
            c.previousYear();
        };

        getId('btnNext').onclick = function () {
            c.nextMonth();
        };

        getId('btnNextYr').onclick = function () {
            c.nextYear();
        };
    }

    // Get element by id
    function getId(id) {
        return document.getElementById(id);
    }
</script>