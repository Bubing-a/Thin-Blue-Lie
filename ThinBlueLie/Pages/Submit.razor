@page "/Submit"
@inherits SubmitBase
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject AutoMapper.IMapper mapper
@using Syncfusion.Blazor.Spinner
@using Syncfusion.Blazor.DropDowns
@using ThinBlueLie.Helper
@using ThinBlueLie.Helper.Extensions
@using Syncfusion.Blazor.RichTextEditor
@using Syncfusion.Blazor.Buttons
@using static ThinBlueLie.Searches.SearchClasses;
@using Syncfusion.Blazor.Calendars


<Title>Post Event - Thin Blue Lie</Title>
<Meta Property="og:type" Content="website" />
<Meta Property="og:title" Content="Create a new Event" />
<Meta Name="description" Content="Create a new Event to be stored in our database and presented on our website" />

<style>
    body {
        overflow-x: hidden;
    }

    form {
        display: inherit;
    }

    @@font-face {
        font-family: 'button-icons';
        src: url(data:application/x-font-ttf;charset=utf-8;base64,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) format('truetype');
        font-weight: normal;
        font-style: normal;
    }

    .e-btn-sb-icons {
        font-family: 'button-icons';
        line-height: 1;
        font-style: normal;
        font-weight: normal;
        font-variant: normal;
        text-transform: none;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
    }

    .e-add-icon::before {
        content: '\e70a';
    }

    .e-richtexteditor .e-rte-content .e-content {
        min-height: 150px;
    }

    .e-file-select-wrap {
        padding: 0.2rem;
    }

    .e-close-icon:before {
        content: '\e745';
    }

    .e-double-arrow-up-icon:before {
        content: '\e7c5';
    }

    .e-chevron-up-icon:before {
        content: '\e734';
    }

    .e-chevron-down-icon:before {
        content: '\e705';
    }

    .e-primary.e-custom {
        color: #221e1e !important;
        background-color: #F8F9FA !important;
        border-color: #F8F9FA !important;
        padding-right: 5px;
        padding-left: 0px;
    }

        .e-primary.e-custom:hover {
            color: #314DB2 !important;
        }

        .e-primary.e-custom:focus, .e-primary.e-cuton:active {
            box-shadow: none !important;
        }

    .e-acrdn-header-content {
        width: 100% !important;
        position: relative;
    }

    .e-acrdn-content .e-acrdn-content {
        padding-left: 0.6rem !important;
    }

    .e-acrdn-header:hover .e-icons, .e-acrdn-header, .e-acrdn-header-content {
        text-decoration: none !important;
        color: inherit !important;
    }
</style>
<AuthorizeView>
    <NotAuthorized>
        <h5 class="text-center mt-5">
            Either
            <a href="/Account/Login">Login</a> or
            <a href="/Account/Register">Register</a>
            to create a new Event
        </h5>
    </NotAuthorized>
    <Authorized Context="Auth">
        <div class="offset-lg-2 row container-fluid mr-0 pr-0" style="margin-bottom:100px;">
            @if (SavingData)
            {
                <div style="z-index: 102; margin-bottom: 100px;">
                    <SfSpinner Visible="SavingData" CssClass="e-spin-overlay" />
                </div>
            }
            <EditForm Model="model" OnValidSubmit="HandleValidSubmitAsync">
                <ObjectGraphDataAnnotationsValidator />
                <div class="col-lg-5 col-md-6 border-left border-right border-bottom">
                    <div class="d-block mb-0 pt-3 border-bottom mb-2">
                        <h4 class="mb-0 align-te">Information Submission Form</h4>
                    </div>
                    <div>
                        <div class="form-group">
                            <div id="datepicker-control">
                                <SfDatePicker TValue="DateTime?" @bind-Value="@DateValue" Min="@MinDate" Max="@Today" Format="yyyy-MM-dd" Placeholder="Select a date" StrictMode="true">
                                    <DatePickerEvents TValue="DateTime?" ValueChange="@FindEvents"></DatePickerEvents>
                                </SfDatePicker>
                                <ValidationMessage For="@(() => model.Timelineinfos.Date)"></ValidationMessage>
                            </div>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="col-5 dropdown" style="position:relative;">
                            <div class="align">
                                <div class="position-relative mb-1 mb-md-0"> <br /> <label class="position-absolute" style="top:-6px; font-size:14px; line-height:24px;">State</label></div>
                                <SfDropDownList TItem="EnumExtensions.ListItem" TValue="TimelineinfoEnums.StateEnum?" PopupHeight="230px" Placeholder="State" @bind-Value="@model.Timelineinfos.State" DataSource="@States">
                                    <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
                                </SfDropDownList>
                                <ValidationMessage For="@(() => model.Timelineinfos.State)"></ValidationMessage>
                            </div>
                        </div>
                        <div class="col-7">
                            <SfTextBox CssClass="e-filled" Placeholder="City" FloatLabelType="@FloatLabelType.Always"
                                       HtmlAttributes="@StaticHelper.AutoCompleteOff"
                                       @bind-Value="model.Timelineinfos.City">
                            </SfTextBox>
                            <ValidationMessage For="@(() => model.Timelineinfos.City)"></ValidationMessage>
                        </div>
                    </div>
                    <div class="w-100 pt-3">
                        <SfTextBox CssClass="e-filled" Placeholder="Title" FloatLabelType="@FloatLabelType.Always" @bind-Value="model.Timelineinfos.Title"></SfTextBox>
                        <ValidationMessage For="@(() => model.Timelineinfos.Title)"></ValidationMessage>
                    </div>
                    <hr />
                    <div class="d-flex">
                        <h6 class="d-inline">
                            Fill out the following information for the Subject
                        </h6>
                        <div class="d-inline ml-auto" @onclick="AddSubject" @onclick:stopPropagation="false" @onclick:preventDefault>
                            <SfButton IconCss="e-btn-sb-icons e-add-icon" CssClass="e-small e-flat float-right" IsPrimary="true" IconPosition=@IconPosition.Right>
                                Subject
                            </SfButton>
                        </div>
                    </div>
                    <div id="SubjectList">
                        @foreach ((var subject, Int32 i) in model.Subjects.Select((subject, i) => (subject, i)))
                        {
                            <Subject subject="subject" DeleteSubject="DeleteSubject" SuggestSubjects="SuggestSubjects"></Subject>
                            if (SimilarSubjects[i] != null)
                            {
                                <SimilarPeople PersonRank="i" SetSameAs="SetSameAsSubject" People="SimilarSubjects[i]"></SimilarPeople>
                            }
                        }
                    </div>
                    <hr />
                    <div class="d-flex">
                        <h6 class="d-inline">
                            Fill out the following information for the Officer
                        </h6>
                        <div class="d-inline ml-auto" @onclick="AddOfficer" @onclick:stopPropagation="false" @onclick:preventDefault>
                            <SfButton IconCss="e-btn-sb-icons e-add-icon" CssClass="e-small e-flat float-right" IsPrimary="true" IconPosition=@IconPosition.Right>
                                Officer
                            </SfButton>
                        </div>
                    </div>
                    <div id="OfficerList">
                        @foreach ((var officer, Int32 i) in model.Officers.Select((officer, i) => (officer, i)))
                        {
                            <Officer isSubmit="true" officer="officer" DeleteOfficer="DeleteOfficer" SuggestOfficers="SuggestOfficers"></Officer>
                            if (SimilarOfficers[i] != null)
                            {
                                <SimilarPeople PersonRank="i" SetSameAs="SetSameAsOfficer" People="SimilarOfficers[i]"></SimilarPeople>
                            }
                        }
                    </div>
                    <hr />
                    <div class="form-group">
                        <label asp-for="Timelineinfos.Context" class="control-label">Use this section to fill in information about context around the event in the video. This could be things such as it being part of protests, the victim was previously detained, and anything related to the event that happened off-screen.</label>
                        <SfRichTextEditor CssClass="w-100" @bind-Value="@model.Timelineinfos.Context" EnableResize="true" EnableHtmlSanitizer="true" ShowCharCount="true">
                            <RichTextEditorPasteCleanupSettings></RichTextEditorPasteCleanupSettings>
                            <RichTextEditorToolbarSettings Items="@Tools"></RichTextEditorToolbarSettings>
                        </SfRichTextEditor>
                        <ValidationMessage For="@(() => model.Timelineinfos.Context)"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <ValidationSummary />
                        <button id="submit" type="submit" class="btn btn-primary">Submit</button>
                        <a asp-page="/Index" style="float:right">Back to Home</a>
                    </div>
                </div>
                <div class="col-lg-5 col-md-6">
                    <div class="row">
                        <div class="container-fluid d-block">
                            <h4 class="pt-2">Similar Events</h4>
                            <p class="mb-0 border-bottom" style="font-size:1em">
                                Here are Events that share a date with your event, check to see if your event is a duplicate.
                            </p>
                            <div id="VideoList">
                                @if (SimilarEvents.Count == 0)
                                {
                                    <div class="container mt-2" style="min-height:100px;">
                                        <h5>There are no similar or duplicate Events!</h5>
                                    </div>
                                }
                                else
                                {
                                    foreach (var Event in SimilarEvents)
                                    {
                                        <SimilarEvents Event="Event"></SimilarEvents>
                                    }
                                }
                            </div>
                            @*<br />*@
                        </div>
                    </div>
                    <div class="row">
                        <div class="d-block border-top container-fluid border-bottom" @onclick:stopPropagation="false" @onclick:preventDefault>
                            <h4 class="pt-2">Add Media</h4>
                            <p class="mb-0" style="font-size:1em">
                                Add Media relavent to the event, such as videos, images, news articles, etc.
                            </p>
                        </div>
                        <div id="MediaList" class="container-fluid">
                            <CascadingValue Name="IsEdit" Value="false">
                                <MediaAccordion Medias="model.Medias" AddMedia="AddMedia" DeleteMedia="DeleteMedia" MoveMediaDown="MoveMediaDown" MoveMediaTop="MoveMediaTop" MoveMediaUp="MoveMediaUp">
                                </MediaAccordion>
                            </CascadingValue>
                        </div>
                    </div>
                </div>
            </EditForm>
        </div>
    </Authorized>
</AuthorizeView>
@code {
    [CascadingParameter]
    private Task<AuthenticationState> _authState { get; set; }

    public List<ViewSimilar>? SimilarEvents { get; set; } = new List<ViewSimilar>();
    protected async void FindEvents(ChangedEventArgs<DateTime?> args)
    {
        model.Timelineinfos.Date = Convert.ToDateTime(DateValue);
        SearchesSubmit searchesSubmit = new SearchesSubmit();
        SimilarEvents = await searchesSubmit.GetSimilar(args.Value?.ToString("yyyy-MM-dd"));
        this.StateHasChanged();
    }
    protected override async Task OnInitializedAsync()
    {
        userState = await _authState;
        if (userState.User.Identity.IsAuthenticated)
        {
            SearchesSubmit searchesSubmit = new SearchesSubmit();
            SimilarOfficers.Add(new List<SimilarPersonGeneral> { });
            SimilarSubjects.Add(new List<SimilarPersonGeneral> { });
            Today = DateTime.Today;
            MinDate = new DateTime(1776, 6, 4);
            DateValue = DateTime.Today;
            SimilarEvents = await searchesSubmit.GetSimilar(DateTime.Today.ToString("yyyy-MM-dd"));
        }
    }

}