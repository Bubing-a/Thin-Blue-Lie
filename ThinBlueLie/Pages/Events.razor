@page "/Events/{Date:datetime}/{Title}"
@page "/Events/{Date:datetime}"
@using ThinBlueLie.ViewModels
@using ThinBlueLie.Helper.Extensions
@using DataAccessLibrary.DataAccess
@using Syncfusion.Blazor.Spinner
@using static ThinBlueLie.Helper.ConfigHelper
@using Microsoft.AspNetCore.WebUtilities
@using HtmlAgilityPack
@using ThinBlueLie.Models.ViewModels
@using DataAccessLibrary.UserModels;
@using static ThinBlueLie.Helper.Extensions.StringExtensions
@using static ThinBlueLie.Helper.Algorithms.LinkConverter
@using Microsoft.AspNetCore.Identity
@inject UserManager<ApplicationUser> userManager
@inject IJSRuntime JsRuntime
@inject NavigationManager navManager
@inject AutoMapper.IMapper mapper


<style>
    .context {
        font-size: 1.1rem;
    }

    .event-main-row {
        max-height: 650px;
        min-height: 575px;
    }

    .brokencard {
        border: none;
    }

    .e-tip-content .e-calendar {
        border: none !important;
        background-color: white !important;
    }

    .e-popup {
        background-color: white !important;
    }
</style>


<Meta Property="og:type" Content="article" />
@if (EventExists && (Event.Data?.Context != null))
{
    <Title>@Event.Data.Title - Thin Blue Lie</Title>
    <Meta Property="og:title" Content="@(Event.Data.Title + " - Thin Blue Lie")" />
    <Meta Property="og:image" Content="@(Event.Medias.FirstOrDefault()?.Thumbnail ?? "https://via.placeholder.com/150")" />

    HtmlDocument htmlDoc = new HtmlDocument();
    htmlDoc.LoadHtml(Event.Data.Context);
    string result = htmlDoc.DocumentNode.InnerText;
    <Meta Name="description" Content="@(TruncateString(result, 165))" />

    <Meta Property="article:published_time" Content="@Event.Data.Timestamp.ToUniversalTime().ToString()" />
    <Meta Property="article:modified_time" Content="@Event.Data.EventUpdated.ToUniversalTime().ToString()" />
}
else if (MultipleEvents)
{
    <Title>@Date?.ToShortDateString() - Thin Blue Lie</Title>
    <Meta Property="og:title" Content="@(Date?.ToShortDateString() + " - Thin Blue Lie")" />
}
else
{
    <Title>Events - Thin Blue Lie</Title>
}


<TimeNavigation Date="Date"></TimeNavigation>


@if (MultipleEvents && Title == null)
{
    <h5 class="text-center col-10 mt-3">@Date?.ToLongDateString()</h5>
    <div class="container mt-1">
        <div class="border px-3 py-2">
            @foreach (var evnt in DatesEvents)
            {
                <div class="py-2 row">
                    <div class="col-8">
                        <h5><a href="@("/Events/" + Date?.ToString("yyyy-MM-dd") + "/" + UriExtensions.CreateTitleUrl(evnt.Title))">@evnt.Title</a></h5>
                        <p>@evnt.Context</p>
                    </div>
                    <div class="col-4">
                        <img alt="@evnt.Media.Blurb" style="max-height:175px;" src="@evnt.Media.Thumbnail" />
                    </div>
                </div>
            }
        </div>
    </div>
}
else if (EventExists)
{
    <div class="mx-3">
        <div class="row">
            <div class="col-lg-9 event-main-row">
                <MediaCarousel Media="Event.Medias"></MediaCarousel>
            </div>
            <div class="col-lg-3">
                <CascadingValue Value="@(User?.RepAuthorizer(PrivledgeEnum.Privledges.EditLocked) ?? false)">
                    <DataCard Information="Event.Data" Officers="Event.Officers" Subjects="Event.Subjects"></DataCard>
                </CascadingValue>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-9">
                @*Context Section*@
                <div class="border-bottom">
                    <h5 style="margin-left: 6%; font-size:30px;" class="mt-2 mb-0"> <strong>Context</strong></h5>
                </div>
                @if (Event.Data.Context == null)
                {
                    <div class="col-lg-9">
                        <div class="mx-auto">
                            <SfSpinner Type="@SpinnerType.Material"></SfSpinner>
                        </div>
                    </div>
                }
                else
                {
                    <article>
                        <div class="context indent px-md-3 pt-2">
                            @((MarkupString)Event.Data.Context)
                        </div>
                    </article>
                }
            </div>
            <div class="col-lg-3">
                <div class="container-fluid border-bottom mb-2">
                    <h4 class="mt-3 mb-0">
                        <strong>News Articles</strong>
                    </h4>
                </div>
                @foreach (var newsItem in Event.Medias.Where(m => (MediaEnums.MediaTypeEnum)m.MediaType == MediaEnums.MediaTypeEnum.News))
                {
                    <NewsCard newsUrl="@newsItem.SourcePath"></NewsCard>
                }
            </div>
        </div>
    </div>
}
else if (FakeEvent)
{
    <h4 class="text-center mt-4">Opps, something went wrong! Please double-check your link</h4>
}
else if (NoEvents)
{
<h4 class="text-center mt-4">There are no recorded events on this day</h4>
}
else
{
<SfSpinner Type="SpinnerType.Material"></SfSpinner>
}

@code {
    public ViewEvent Event { get; set; }
    public List<FirstLoadEvents> DatesEvents { get; set; }
    [Parameter]
    public DateTime? Date { get; set; }
    [Parameter]
    public string Title { get; set; }
    Timeline Timeline;
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }
    public AuthenticationState userState;
    public ApplicationUser User;
    public bool EventExists = false;
    bool MultipleEvents;
    string DbTitle;
    bool NoEvents;
    bool FakeEvent;

    protected override async Task OnInitializedAsync()
    {
        EventExists = MultipleEvents = NoEvents = FakeEvent = false;
        userState = await AuthState;
        User = await userManager.GetUserAsync(userState.User);
    }
    protected override async Task OnParametersSetAsync()
    {
        EventExists = MultipleEvents = NoEvents = FakeEvent = false;
        if (Date == null) { return; }

        if (Title != null)
        {
            await ChangeDay();
        }
        else
        {
            DatesEvents = new List<FirstLoadEvents>();  //clearing previous information
            await GetDaysEvents();

            if (DatesEvents.Count() == 1)
            {
                if (Title == null)
                {
                    navManager.NavigateTo(navManager.BaseUri + "Events/" +
                        Date?.ToString("yyyy-MM-dd") + "/" +
                        UriExtensions.CreateTitleUrl(DatesEvents.FirstOrDefault().Title)); //recall onparameters set async
                    return;
                }
            }
            else if (DatesEvents.Count() > 1)
            {
                MultipleEvents = true;
            }
        }

        if (Event?.Data?.City == null || DatesEvents?.Count() == 0)
        {
            NoEvents = true;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender && EventExists)
        {
            await JsRuntime.InvokeVoidAsync("InitializeSwiper");
        }
    }
    DataAccess data = new DataAccess();
    async Task GetDaysEvents()
    {
        List<FirstLoadEvents> events = new List<FirstLoadEvents>();
        string getEventsFromDate = "SELECT t.Title, t.Context, t.IdTimelineinfo FROM timelineinfo t WHERE t.Date = @date";
        (await data.LoadData<FirstLoadEvents?, dynamic>(getEventsFromDate, new { date = Date?.ToString("yyyy-MM-dd") }, GetConnectionString())).ForEach(e => events.Add(e));
        if (events.Any())
        {
            foreach (var evnt in events)
            {
                string getFirstMedia = "Select *,(true) as Processed from media m where m.IdTimelineinfo = @id order by m.rank Limit 1";
                evnt.Media = new ViewMedia();
                evnt.Media = await data.LoadDataSingle<ViewMedia, dynamic>(getFirstMedia, new { id = evnt.IdTimelineinfo }, GetConnectionString());

                var htmlDoc = new HtmlDocument();
                htmlDoc.LoadHtml(evnt.Context);
                var htmlBody = htmlDoc.DocumentNode;
                HtmlNode text = htmlBody.FirstChild;
                evnt.Context = string.Join(". ", text.InnerText.Split(". ").Take(2)); //Get just the first two sentences
            }
        }
        else
        {
            NoEvents = true;
        }
        DatesEvents.AddRange(events);
        await ViewMedia.GetDataMany(events.Select(m => m.Media).ToList());
        //await Task.Delay(50);
    }

    //Get new information
    private async Task ChangeDay()
    {
        //get new information from DB
        DbTitle = string.Join("[^a-zA-Z]*", Title.Split('-'));
        var title = $"[^a-zA-Z]*{DbTitle}"; //use Title to get information
        var query = @"SELECT t.*, Max(e.Timestamp) As EventUpdated, Min(e.Timestamp) as Timestamp
                From timelineinfo t
                Left Join edithistory e on t.IdTimelineinfo = e.IdTimelineinfo
                where t.date = @date and t.Title Regexp @title and Confirmed = 1;";
        var timelineinfo = await data.LoadDataSingle<Timelineinfo, dynamic>(query, new { date = Date?.ToString("yyyy-MM-dd"), title }, GetConnectionString());
        if (timelineinfo.IdTimelineinfo != 0) //If title matches title on that day
        {
            var mediaQuery = "SELECT *,(true) as Processed From media m where m.IdTimelineinfo = @id Order By m.Rank;";
            var officerQuery = "SELECT o.Name, o.Race, o.Sex, t_o.Age, t_o.Misconduct, t_o.Weapon " +
                    "FROM timelineinfo t " +
                    "JOIN timelineinfo_officer t_o ON t.IdTimelineinfo = t_o.IdTimelineinfo " +
                    "JOIN officers o ON t_o.IdOfficer = o.IdOfficer " +
                    "WHERE t.IdTimelineinfo = @id ;";
            var subjectQuery = "SELECT s.Name, s.Race, s.Sex, t_s.Age, t_s.Armed " +
                    "FROM timelineinfo t " +
                    "JOIN timelineinfo_subject t_s ON t.IdTimelineinfo = t_s.IdTimelineinfo " +
                    "JOIN subjects s ON t_s.IdSubject = s.IdSubject " +
                    "WHERE t.IdTimelineinfo = @id;";

            //get media, officers, and subjects using timelineinfo id
            List<ViewMedia> media = await data.LoadData<ViewMedia, dynamic>(mediaQuery, new { id = timelineinfo.IdTimelineinfo }, GetConnectionString());
            List<DBOfficer> officers = await data.LoadData<DBOfficer, dynamic>(officerQuery, new { id = timelineinfo.IdTimelineinfo }, GetConnectionString());
            List<DBSubject> subjects = await data.LoadData<DBSubject, dynamic>(subjectQuery, new { id = timelineinfo.IdTimelineinfo }, GetConnectionString());

            await ViewMedia.GetDataMany(media);

            Event = new ViewEvent
            {
                Data = timelineinfo,
                Medias = media,
                Officers = mapper.Map<List<DBOfficer>, List<ViewOfficer>>(officers),
                Subjects = mapper.Map<List<DBSubject>, List<ViewSubject>>(subjects)
            };
            EventExists = true;
        }
        else
        {
            FakeEvent = true;
        }
        this.StateHasChanged();
    }
}
