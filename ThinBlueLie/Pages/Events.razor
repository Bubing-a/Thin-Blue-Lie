@page "/Events"
@using ThinBlueLie.ViewModels
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Buttons
@using ThinBlueLie.Helper.Extensions
@using DataAccessLibrary.DataAccess
@using Syncfusion.Blazor.Spinner
@using static ThinBlueLie.Helper.ConfigHelper
@using Microsoft.AspNetCore.WebUtilities
@using HtmlAgilityPack
@using DataAccessLibrary.UserModels;
@using static ThinBlueLie.Helper.Extensions.StringExtensions
@using static ThinBlueLie.Helper.Algorithms.LinkConverter
@using Microsoft.AspNetCore.Identity
@inject UserManager<ApplicationUser> userManager
@inject IJSRuntime JsRuntime
@implements IDisposable
@inject NavigationManager navManager
@inject AutoMapper.IMapper mapper


<style>
    .context {
        font-size: 1.1rem;
    }

    .event-main-row {
        min-height: 550px;
    }

    .brokencard {
        border: none;
    }

    .e-tip-content .e-calendar {
        border: none !important;
        background-color: white !important;
    }

    .e-popup {
        background-color: white !important;
    }
</style>


<Meta Property="og:type" Content="article" />
@if (EventExists)
{
    <Title>@Event.FirstOrDefault().Data.Title - Thin Blue Lie</Title>
    <Meta Property="og:title" Content="@(Event.FirstOrDefault().Data.Title + " - Thin Blue Lie")" />
    <Meta Property="og:image" Content="@GetLinkFromData(Event.FirstOrDefault().Medias.FirstOrDefault())" />

    HtmlDocument htmlDoc = new HtmlDocument();
    htmlDoc.LoadHtml(Event.FirstOrDefault().Data.Context);
    string result = htmlDoc.DocumentNode.InnerText;
    <Meta Name="description" Content="@(TruncateString(result, 165))" />

    <Meta Property="article:published_time" Content="@Event.FirstOrDefault().Data.Timestamp.ToUniversalTime().ToString()" />
    <Meta Property="article:modified_time" Content="@Event.FirstOrDefault().Data.EventUpdated.ToUniversalTime().ToString()" />
}
else
{
    <Title>Events - Thin Blue Lie</Title>
}


<div class="d-flex my-2">
    <div class="col-10">
        <Timeline Date="(DateTime)Date" @ref="Timeline"></Timeline>
    </div>
    <div class="ml-4 mt-auto">
        <SfTooltip CssClass="e-tooltip-css" OpensOn="Click">
            <TooltipTemplates>
                <Content>
                    <SfCalendar TValue="DateTime?" Max="DateTime.Today" @bind-Value="Date">
                        <CalendarEvents TValue="DateTime?" ValueChange="@SetDay"></CalendarEvents>
                    </SfCalendar>
                </Content>
            </TooltipTemplates>
            <SfButton CssClass="e-outline text" IsPrimary="true" Content="Calendar"></SfButton>
        </SfTooltip>
    </div>
</div>
@if (EventExists)
{
foreach (var Case in Event?.Where(e => !string.IsNullOrEmpty(e?.Data.Title)))
{
    <div class="mx-3">
        <div class="row">
            <div class="col-lg-9 event-main-row">
                <MediaCarousel Media="Case.Medias"></MediaCarousel>
            </div>
            <div class="col-lg-3">
                <CascadingValue Value="@((bool)User?.RepAuthorizer(PrivledgeEnum.Privledges.EditLocked))">
                    <DataCard Information="Case.Data" Officers="Case.Officers" Subjects="Case.Subjects"></DataCard>
                </CascadingValue>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-9">
                @*Context Section*@
                <div class="border-bottom">
                    <h5 style="margin-left: 6%; font-size:30px;" class="mt-2 mb-0"> <strong>Context</strong></h5>
                </div>
                @if (Case.Data.Context == null)
                {
                    <div class="col-lg-9">
                        <div class="mx-auto">
                            <SfSpinner Type="@SpinnerType.Material"></SfSpinner>
                        </div>
                    </div>
                }
                else
                {
                    <article>
                        <p class="context indent">
                            @((MarkupString)Case.Data.Context)
                        </p>
                    </article>
                }
            </div>
            <div class="col-lg-3">
                <div class="container-fluid border-bottom mb-2">
                    <h4 class="mt-3 mb-0">
                        <strong>News Articles</strong>
                    </h4>
                </div>
                @foreach (var newsItem in Case.Medias.Where(m => (MediaEnums.MediaTypeEnum)m.MediaType == MediaEnums.MediaTypeEnum.News))
                {
                    <NewsCard newsUrl="@newsItem.SourcePath"></NewsCard>
                }
            </div>
        </div>
    </div>
}
}
@code {
    public List<ViewEvent> Event { get; set; }
    public DateTime? Date { get; set; }
    string newUri;
    Timeline Timeline;
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }
    public AuthenticationState userState;
    public ApplicationUser User;
    public bool EventExists = false;
    protected override async Task OnInitializedAsync()
    {
        EventExists = false;
        navManager.LocationChanged += LocationChanged;
        Event = new List<ViewEvent>();
        var uri = new Uri(navManager.Uri);
        if (string.IsNullOrWhiteSpace(QueryHelpers.ParseQuery(uri.Query).TryGetValue("d", out var type) ? type.First() : ""))
        {
            Date = DateTime.Today;
        }
        else
        {
            Date = TryCatchDate();
        }
        userState = await AuthState;
        User = await userManager.GetUserAsync(userState.User);
        await ChangeDay();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender && EventExists)
        {
            await JsRuntime.InvokeVoidAsync("InitializeSwiper");
        }
    }

    //When the url changes, rerun the changeday on the new date
    async void LocationChanged(object sender, LocationChangedEventArgs e)
    {
        newUri = e.Location;
        Date = TryCatchDate();
        await ChangeDay();
    }

    private DateTime TryCatchDate()
    {
        var uri = new Uri(navManager.Uri);
        try
        {
            return Convert.ToDateTime(QueryHelpers.ParseQuery(uri.Query).TryGetValue("d", out var type) ? type.First() : "");
        }
        catch (FormatException)
        {
            return DateTime.Today;
        }
    }

    public void Dispose()
    {
        // Unsubscribe from the event when component is disposed
        navManager.LocationChanged -= LocationChanged;
    }

    //Change url
    private async Task SetDay()
    {
        var queryParam = QueryHelpers.ParseQuery(new Uri(navManager.Uri).Query).TryGetValue("d", out var type) ? type.First() : "";
        if (queryParam != Date?.ToString("yyyy-MM-dd"))//if url does not match date
        {
            string url = UriExtensions.RemoveQueryStringByKey(navManager.Uri, "d");
            var query = new Dictionary<string, string> { { "d", Date?.ToString("yyyy-MM-dd") } };

            navManager.NavigateTo(QueryHelpers.AddQueryString(url, query));
        }
        await Timeline.LoadFromNewDate((DateTime)Date);
    }

    //Get new information
    private async Task ChangeDay()
    {
        Event = new List<ViewEvent>(); //clearing previous information
        DataAccess data = new DataAccess();

        //get new information from DB
        var query = @"SELECT t.*, Max(e.Timestamp) As EventUpdated, Min(e.Timestamp) as Timestamp
            From timelineinfo t
            Left Join edithistory e on t.IdTimelineinfo = e.IdTimelineinfo
            where t.date = @date and Confirmed = 1;";
        List<Timelineinfo?> timelineinfo = await data.LoadData<Timelineinfo?, dynamic>(query, new { date = Date?.ToString("yyyy-MM-dd") }, GetConnectionString());
        if (timelineinfo.FirstOrDefault()?.City != null)
        {
            foreach ((var Case, Int32 i) in timelineinfo.Select((Case, i) => (Case, i)))
            {
                var mediaQuery = "SELECT m.MediaType, m.SourcePath, m.Gore, m.SourceFrom, m.Blurb, m.Credit, m.SubmittedBy, m.Rank From media m where m.IdTimelineinfo = @id Order By m.Rank;";
                var officerQuery = "SELECT o.Name, o.Race, o.Sex, t_o.Age, t_o.Misconduct, t_o.Weapon " +
                        "FROM timelineinfo t " +
                        "JOIN timelineinfo_officer t_o ON t.IdTimelineinfo = t_o.IdTimelineinfo " +
                        "JOIN officers o ON t_o.IdOfficer = o.IdOfficer " +
                        "WHERE t.IdTimelineinfo = @id ;";
                var subjectQuery = "SELECT s.Name, s.Race, s.Sex, t_s.Age, t_s.Armed " +
                        "FROM timelineinfo t " +
                        "JOIN timelineinfo_subject t_s ON t.IdTimelineinfo = t_s.IdTimelineinfo " +
                        "JOIN subjects s ON t_s.IdSubject = s.IdSubject " +
                        "WHERE t.IdTimelineinfo = @id;";

                //get media, officers, and subjects using timelineinfo id
                List<Media> media = await data.LoadData<Media, dynamic>(mediaQuery, new { id = Case.IdTimelineinfo }, GetConnectionString());
                List<DBOfficer> officers = await data.LoadData<DBOfficer, dynamic>(officerQuery, new { id = Case.IdTimelineinfo }, GetConnectionString());
                List<DBSubject> subjects = await data.LoadData<DBSubject, dynamic>(subjectQuery, new { id = Case.IdTimelineinfo }, GetConnectionString());


                Event.Add(new ViewEvent
                {
                    Data = Case,
                    Medias = media,
                    Officers = mapper.Map<List<DBOfficer>, List<ViewOfficer>>(officers),
                    Subjects = mapper.Map<List<DBSubject>, List<ViewSubject>>(subjects)
                });
                EventExists = true;
            }
        }
        this.StateHasChanged();
    }
}
