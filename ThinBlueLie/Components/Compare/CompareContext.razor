@using AngleSharp.Html.Parser
@using AngleSharp.Html
@using System.IO
@using DiffPlex.DiffBuilder;
@using DiffPlex.DiffBuilder.Model;
@inject IJSRuntime JSRuntime
@inject ISideBySideDiffBuilder sideBySide

@if (IsNewEvent)
{
    <div class="my-2">
        <h5>Context:</h5>
        <div class="border p-3">
            @((MarkupString)NewContext)
        </div>
    </div>
}
else
{
    <div class="diff-container">

        <div class="diff-header">
            @Header(new DiffStats(diff.NewText))
        </div>
        <CascadingValue Value="CollapseContent" Name="CollapseContent">
            <div class="diff-panes" @ref="pane" style="@(CollapseContent ? $"max-height: {MaxHeight}px; overflow: hidden;" : "max-height: auto; overflow: auto;")">
                <div class="diff-pane">
                    <TextDiffPane Model="diff.OldText" PanePosition="@PanePosition.Left"></TextDiffPane>
                </div>
                <div class="diff-pane">
                    <TextDiffPane Model="diff.NewText" PanePosition="@PanePosition.Right"></TextDiffPane>
                </div>
            </div>
        </CascadingValue>
        @if (CollapseContent && paneHeight >= MaxHeight)
        {
            <p class="diff-expand-notice">...</p>
        }
    </div>
}
@code {
    [Parameter]
    public int MaxHeight { get; set; } = 300;

    [Parameter]
    public bool CollapseContent { get; set; }
    [CascadingParameter]
    public bool IsNewEvent { get; set; }
    /// <summary>
    /// The text before any changes.
    /// </summary>
    [Parameter]
    public string OldContext { get; set; }

    /// <summary>
    /// The text after any changes.
    /// </summary>
    [Parameter]
    public string NewContext { get; set; }
    [Parameter] public RenderFragment<DiffStats> Header { get; set; }

    private SideBySideDiffModel diff;
    private ElementReference pane;
    private int paneHeight;

    string PrettifyHtmlString(string html)
    {
        var parser = new HtmlParser();
        var dom = parser.ParseDocument("<html><body></body></html>");
        var document = parser.ParseFragment(html, dom.Body);
        using (var writer = new StringWriter())
        {
            document.ToHtml(writer, new PrettyMarkupFormatter
            {
                Indentation = "&nbsp&nbsp",
                NewLine = "\n"
            });
            return writer.ToString();
        }
    }
    /// <summary>
    /// When parameters set update the component.
    /// </summary>
    /// <returns></returns>
    protected override async Task OnParametersSetAsync()
    {
        if (IsNewEvent == false)
        {
            //Make it tabbed nicely
            OldContext = PrettifyHtmlString(OldContext);
            NewContext = PrettifyHtmlString(NewContext);
            //remove first empty line
            OldContext = OldContext.StartsWith("/n") ? OldContext.Remove(0, 1) : OldContext;
            NewContext = NewContext.StartsWith("/n") ? NewContext.Remove(0, 1) : NewContext;
            //swap out < with their ascii codes
            OldContext = OldContext.Replace("<", "&lt").Replace(">", "&gt");
            NewContext = NewContext.Replace("<", "&lt").Replace(">", "&gt");

            diff = sideBySide.BuildDiffModel(OldContext, NewContext);

            if (pane.Id != null)
            {
                paneHeight = await JSRuntime.InvokeAsync<int>("blazorTextDiff.getHeight", pane);
            }
        }
    }

    /// <summary>
    /// When loaded try to diff if text available.
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        if (pane.Id != null)
        {
            paneHeight = await JSRuntime.InvokeAsync<int>("blazorTextDiff.getHeight", pane);
            Console.WriteLine(paneHeight);
        }
    }
}
