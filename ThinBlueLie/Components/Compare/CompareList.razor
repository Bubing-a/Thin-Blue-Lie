@using ThinBlueLie.Helper.Extensions
@typeparam TEnum

@if (IsOriginal)
{
    @foreach (Enum flag in Enum.GetValues(typeof(TEnum)))
    {
        if (Old != null && ((Enum)Enum.ToObject(typeof(TEnum), Old)).HasFlag(flag))
        {
            if (New != null && ((Enum)Enum.ToObject(typeof(TEnum), New)).HasFlag(flag))
            {
                <li>@EnumExtensions.GetEnumDisplayName(flag)</li>
            }
            else
            {
                <li class="deleted-li">@EnumExtensions.GetEnumDisplayName(flag)</li>
            }

        }
    }
}
else
{
    @foreach (Enum flag in Enum.GetValues(typeof(TEnum)))
    {
        if (New != null && ((Enum)Enum.ToObject(typeof(TEnum), New)).HasFlag(flag))
        {
            if (Old != null && ((Enum)Enum.ToObject(typeof(TEnum), Old)).HasFlag(flag) || IsNewEvent)
            {
                <li>@EnumExtensions.GetEnumDisplayName(flag)</li>
            }
            else
            {
                <li class="inserted-li">@EnumExtensions.GetEnumDisplayName(flag)</li>
            }
        }
    }
}
@code {
    [Parameter]
    public bool IsOriginal { get; set; }
    [CascadingParameter]
    public bool IsNewEvent { get; set; }

    [Parameter]
    public int? Old { get; set; }
    [Parameter]
    public int? New { get; set; }
}
