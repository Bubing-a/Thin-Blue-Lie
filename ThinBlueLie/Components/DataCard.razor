@using ThinBlueLie.ViewModels
@using static ThinBlueLie.Helper.Extensions.EnumExtensions
@using static ThinBlueLie.Helper.Extensions.StringExtensions
@using static ThinBlueLie.Models.ViewSimilar;
@using static ThinBlueLie.Helper.Extensions.IntExtensions
@using static DataAccessLibrary.Enums.TimelineinfoEnums
@using Syncfusion.Blazor.Spinner
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Buttons
@inject AutoMapper.IMapper mapper

<style>
    .card-title {
        margin-bottom: .5rem;
    }
</style>
@if (Information == null)
{
    <div class="h-100 mx-auto mx-lg-0 p-lg-0">
        <div class="mx-auto">
            <SfSpinner Type="@SpinnerType.Material"></SfSpinner>
        </div>
    </div>
}
else
{
    <div class="h-100 mx-auto mx-lg-0 p-lg-0">
        <div class="dataCard h-100 card border-dark mb-3 w-100" style="min-width:175px;">
            <div class="card-header text-black">
                @(Information.Date.ToString("MMMM d") + GetDaySuffix(Information.Date.Day) + ", " + Information.Date.Year.ToString())
            </div>
            <div class="card-body text-dark pb-0">
                <div>
                    <h5 class="card-title mb-0"> @Information.City, @GetEnumDisplayName((TimelineinfoEnums.StateEnum)Information.State)</h5>
                    <hr class="mt-0 pb-0 mb-2 pt-0" />
                </div>
                <div class="people">
                    <span class="similar-bold">
                        <strong>Officer@(officersDetails.Count != 1? "s:" : ":")</strong>
                    </span>
                    @if (officersDetails.Count > 1)
                    {
                        <ul class="people-list">
                            @for (int i = 0; i < officersDetails.Count; i++)
                            {
                                <li>
                                    @officersDetails[i]
                                </li>

                                var officer = Officers[i];
                            }
                        </ul>
                    }
                    else { <div class="single-person">@officersDetails[0]</div> }
                </div>
                <div class="people">
                    <span class="similar-bold">
                        <strong>Subject@(subjectsDetails.Count != 1? "s:" : ":")</strong>
                    </span>
                    @if (subjectsDetails.Count > 1)
                    {
                        <ul class="people-list">
                            @for (int i = 0; i < subjectsDetails.Count; i++)
                            {
                                <li>
                                    @subjectsDetails[i]
                                    @{
                                        var subject = Subjects[i];
                                    }
                                </li>
                            }
                        </ul>
                    }
                    else  { <div class="single-person">@subjectsDetails[0]</div> }
                </div>
                <div>
                    <span class="similar-bold">
                        <strong>Misconduct@(Misconducts.Count != 1? "s:" : ":")</strong>
                    </span>
                    @foreach (var misconduct in Misconducts)
                    {
                        var subject = Subjects.Where(s => s.IdSubject == misconduct.IdSubject).FirstOrDefault();
                        var officer = Officers.Where(o => o.IdOfficer == misconduct.IdOfficer).FirstOrDefault();
                        var misconductArray = IntToArray(misconduct.Misconduct);
                        var weaponArray = IntToArray(misconduct.Weapon);

                        <div>
                            @officer.Name to @subject.Name
                            <SfChip Selection="SelectionType.None">
                                <ChipItems>
                                    @foreach (MisconductEnum misconductValue in Enum.GetValues(typeof(MisconductEnum)))
                                    {
                                        if (misconductArray.Contains((int)misconductValue))
                                        {
                                            <ChipItem Text="@GetEnumDisplayName(misconductValue)"></ChipItem>}
                                    }
                                    @if (weaponArray.Length != 0)
                                    {
                                        @foreach (WeaponEnum weapon in Enum.GetValues(typeof(WeaponEnum)))
                                        {
                                            if (weaponArray.Contains((int)weapon))
                                            {
                                                <ChipItem CssClass="e-danger" Text="@GetEnumDisplayName(weapon)"></ChipItem>}
                                        }}
                                </ChipItems>
                            </SfChip>                            
                        </div>
                    }
                </div>
            </div>
            <div class="card-footer">
                @if ((Information.Locked.ToBool() == false) || CanEditLocked)
                {
                    <a class="pr-2" href="/Edit?id=@Information.IdTimelineinfo">Edit</a>
                }
                <a href="javascript:void" @onclick="@(() => showFlagPopover = true)">Flag</a>
                <SfDialog ShowCloseIcon="true" ID="prompt_dialog" @bind-Visible="@showFlagPopover" Target="#target" Width="240px" AllowDragging="true">
                    <DialogTemplates>
                        <Header>
                            Flag Content
                        </Header>
                        <Content>
                            <Flag IdTimelineinfo="Information.IdTimelineinfo"></Flag>
                        </Content>
                    </DialogTemplates>
                </SfDialog>
            </div>
        </div>
    </div>
}
@code {
    [Parameter]
    public Timelineinfo Information { get; set; }
    [Parameter]
    public List<Misconducts> Misconducts { get; set; }
    [Parameter]
    public List<ViewOfficer> Officers { get; set; }
    [Parameter]
    public List<ViewSubject> Subjects { get; set; }
    [CascadingParameter]
    public bool CanEditLocked { get; set; }

    List<string> subjectsDetails;
    List<string> officersDetails;
    string subjectList;
    string officerList;
    bool showFlagPopover = false;

    protected override void OnParametersSet()
    {
        subjectsDetails = GetSummaryList(mapper.Map<List<ViewSubject>, List<CommonPerson>>(Subjects));
        officersDetails = GetSummaryList(mapper.Map<List<ViewOfficer>, List<CommonPerson>>(Officers));
        subjectList = CommaQuibbling(subjectsDetails);
        officerList = CommaQuibbling(officersDetails);
    }
}
