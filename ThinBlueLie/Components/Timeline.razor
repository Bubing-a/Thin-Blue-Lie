@using DataAccessLibrary.DataModels;
@using Syncfusion.Blazor.Popups
@using ThinBlueLie.Helper.Extensions
@using ThinBlueLie.Helper
@using ThinBlueLie.Models.ViewModels;
@using ThinBlueLie.Helper.Algorithms 
@using ThinBlueLie.Searches
@inject NavigationManager MyNavigationManager
@inject SearchesTimeline searches 

<style>
    .e-control, .e-css {
        font-family: inherit !important;
        font-size: inherit !important;
        font-weight: inherit !important;
    }
    .e-popup {
        background-color: white !important;
    }
</style>
@if (Day == null)
{
    <p>
        Loading
    </p>
}
else
{
    <div class="d-flex justify-content-center h6 mb-0 py-2">
        @Dates[0].Year
    </div>
    <div class="btn-group btn-group-toggle my-auto w-100 mt-5" >
        <div @onclick="PrevWeek" id="triangle-left"> <div class="empty"></div></div>
        @foreach (var i in Enumerable.Range(0, Day.Count))
        {
            <NavLink class="@("week btn " + ((DateTime.Compare(Dates[i], DateTime.Today.Date) <= 0)? "" : "disabled ")
                              + $"severity-{(SeverityCalc.SeverityCalculatorManyHighest(Day[i]))}")"
                     href="@("/Events/" + Dates[i].ToString("yyyy-MM-dd"))">
                @if (Day[i].Any())
                {
                    string Content = string.Empty;
                    foreach (var Event in Day[i])
                    {
                        Content += $"<div class=\"event\" style=\"border-right: 3px solid var(--{SeverityCalc.SeverityCalculatorMany(Event.OfficerInfo)})\">" +
                                        Event.Timelineinfo.Title +
                                    "</div>";
                    }
                    <SfTooltip ID="tooltiphover" Target="@("#day" + i)" OpensOn="Hover" Content="@Content" CloseDelay="100">
                        <div class="timeline-label" id="@("day"+i)">
                            <span class="d-none d-lg-inline">@Dates[i].DayOfWeek</span>
                            <span> @Dates[i].Month/@Dates[i].Day</span>
                        </div>
                    </SfTooltip>
                }
                else
                {
                    <div class="timeline-label" id="@("day"+i)">
                        <span class="d-none d-lg-inline">@Dates[i].DayOfWeek</span>
                        <span> @Dates[i].Month/@Dates[i].Day</span>
                    </div>
                }
                @*<input type="radio">*@
            </NavLink>
        }
        <div @onclick="NextWeek" id="triangle-right"><div class="empty"></div></div>
    </div>

}
@code {
    DateTime[] Dates;
    List<List<TimelineinfoFull>> Day { get; set; }
    [Parameter]
    public DateTime Date { get; set; }

    protected override async Task OnInitializedAsync()
    {
        //TODO make synchronous
        await LoadFromNewDate(Date);
    }

    public async Task LoadFromNewDate(DateTime date)
    {
        var Result = await searches.GetTimeline(date);
        Day = Result.Item1;
        Dates = Result.Item2;
        this.StateHasChanged();
    }

    public async Task NextWeek()
    {
        if (Date.Date < DateTime.Today.Date)
        {
            Date = Date.AddDays(7);
            var Result = await searches.GetTimeline(Date);
            Day = Result.Item1;
            Dates = Result.Item2;
            this.StateHasChanged();
        }
    }
    public async Task PrevWeek()
    {
        if (Date.Date >= InformationBase.MinDate)
        {

            Date = Date.AddDays(-7);
            var Result = await searches.GetTimeline(Date);
            Day = Result.Item1;
            Dates = Result.Item2;
            this.StateHasChanged();
        }
    }


}

