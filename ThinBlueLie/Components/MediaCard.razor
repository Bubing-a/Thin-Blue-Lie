@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Buttons
@using ThinBlueLie.Helper.Extensions
@using System.IO
@using Syncfusion.Blazor.Spinner
@using static ThinBlueLie.Helper.ConfigHelper
@using static DataAccessLibrary.Enums.MediaEnums
@using static ThinBlueLie.Helper.Extensions.EnumExtensions
@using static ThinBlueLie.Helper.Algorithms.LinkConverter
@using AutoMapper
@implements IDisposable
@inject IMapper Mapper

<style>
    .preview-image {
        height: auto;
        width: 100%;
    }

    .e-card > .e-card-image {
        min-height: 100px !important;
    }
</style>
<div class="AddMedia" style="padding:15px 15px 15px 15px;">
    <div name="mediaAdd" class="container-fluid d-flex px-0 mr-0">
        <div class="col-8">
            <div class="form-row">
                <div class="col-12 pl-0">
                    @if (media.SourceFrom == MediaEnums.SourceFromEnum.Device)
                    {
                        <div class="form-group MediaFile">
                            <SfUploader Enabled="!(IsEdit && media.IdMedia != 0)" Multiple="false" ID="UploadFiles" CssClass="e-filled mt-2" 
                                        MaxFileSize="12000000" DropArea=".control-fluid" AllowedExtensions=".img, .jpeg, .jpg, .png">
                                <UploaderEvents ValueChange="OnFileChange" OnRemove="OnFileRemove"></UploaderEvents>
                            </SfUploader>
                        </div>
                    }
                    else
                    {
                        <div class="form-group MediaLink">
                            <SfTextBox Enabled="!(IsEdit && media.IdMedia != 0)" CssClass="e-filled" Placeholder="Link to Media" ValueChange="Refresh"
                                       FloatLabelType="@FloatLabelType.Always" @bind-Value="media.OriginalUrl">
                            </SfTextBox>
                            <ValidationMessage For="@(() => media.OriginalUrl)"></ValidationMessage>
                            @if (media.IsValid == false)
	                        {
                                <div class="validation-message">Something went wrong: check that the link is valid and the correct media type</div>
	                        }                            
                        </div>
                    }
                </div>
            </div>
            <div class="form-row position-relative">
                <div class="my-2 w-100">
                    <SfTextBox CssClass="e-filled" Placeholder="Provide a brief description" FloatLabelType="@FloatLabelType.Always" @bind-Value="media.Blurb"></SfTextBox>
                    <ValidationMessage For="@(() => media.Blurb)"></ValidationMessage>
                </div>
            </div>
            <div class="form-row align-middle mb-2">
                @if (media.MediaType != MediaTypeEnum.News)
                {
                    <div class="col-5 dropdown pl-0">
                        <label class="mb-1">
                            Source's Location
                        </label>
                        <SfDropDownList Enabled="!(IsEdit && media.IdMedia != 0)" TItem="ListItem"
                                        Text="@(media.SourceFrom != null? GetEnumDisplayName((SourceFromEnum)media.SourceFrom).ToString() : "Source Location")"
                                        TValue="SourceFromEnum?" PopupHeight="230px" Placeholder="Source Location" @bind-Value="@media.SourceFrom"
                                        DataSource="@(media.MediaType == MediaTypeEnum.Image? ImageSourceLocations : VideoSourceLocations)">
                            <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
                        </SfDropDownList>
                        <ValidationMessage For="@(() => media.SourceFrom)"></ValidationMessage>
                    </div>
                }
                <div class="@(media.MediaType == MediaTypeEnum.News? "col-12 pl-0" : "col-7")">
                    <label class="mb-1">
                        Credit
                    </label>
                    <SfTextBox CssClass="e-filled" Placeholder="Credit" FloatLabelType="@FloatLabelType.Never" @bind-Value="media.Credit"></SfTextBox>
                </div>
            </div>
            @if (media.MediaType != MediaTypeEnum.News)
            {
                <div>
                    <label class="form-check-label d-inline">
                        Any blood or gore?<span class="text-danger ml-1">*</span>
                        <ValidationMessage For="@(() => media.Gore)"></ValidationMessage>
                    </label>
                    <div class="d-inline">
                        <SfCheckBox CssClass="armed-checkbox" Name="@Guid" @bind-Checked="@media.Gore" Label="Gore"></SfCheckBox>
                    </div>                    
                </div>
            }
        </div>
        <div class="col-4">
            <div class="d-flex h-100 justify-content-center align-items-center">
                @if (media.MediaType == MediaEnums.MediaTypeEnum.Image)
                {
                    if(media.IsValid == false)
                    {
                        <img alt="placeholder image" class="preview-image" src="/Assets/Placeholder-Image.png" />
                    }
                    else if (media.SourceFrom == MediaEnums.SourceFromEnum.Device)
                    {
                        if (!(IsEdit && !string.IsNullOrWhiteSpace(media.SourcePath)))
                        {
                            <h5>There is currently no support for previews of uploaded images</h5>
                        }
                        else
                        {
                            <img alt="image-preview" class="preview-image" src="@media.Thumbnail" />
                        }
                    }
                    else if (!string.IsNullOrWhiteSpace(media.SourcePath))
                    {
                        <img alt="image preview" class="preview-image" src="@media.Thumbnail" />
                    }
                }
                else if (media.MediaType == MediaEnums.MediaTypeEnum.News)
                {
                    if (!string.IsNullOrEmpty(media.OriginalUrl))
                    {
                        <NewsCard ShortVersion="true" newsUrl="@(media.OriginalUrl ?? media.SourcePath)"></NewsCard>
                    }
                    else
                    {
                        <img alt="placeholder image" class="preview-image" src="/Assets/Placeholder-Image.png" />
                    }
                }
                else //if it's a video
                {
                    if (!string.IsNullOrWhiteSpace(media.OriginalUrl) && media.IsValid)
                    {
                        if (media.SourceFrom != null)
                        {
                            <img alt="image preview" class="preview-image" src="@media.Thumbnail" />
                        }
                        else
                        {
                            Uri myUri = new Uri(media.OriginalUrl);
                            host = myUri.Host;
                            <h5>There is currently no support for videos off of "@host"</h5>
                        }
                    }
                    else
                    {
                        <img alt="placeholder image" class="preview-image" src="/Assets/Placeholder-Image.png" />
                    }
                }
            </div>
        </div>
    </div>
</div>
@code {
    [Parameter]
    public ViewMedia media { get; set; }
    [CascadingParameter]
    public bool IsEdit { get; set; }
    [Parameter]
    public EventCallback<int> MoveMediaUp { get; set; }
    [Parameter]
    public EventCallback<int> MoveMediaDown { get; set; }
    [Parameter]
    public EventCallback<int> MoveMediaTop { get; set; }
    [Parameter]
    public EventCallback<int> DeleteMedia { get; set; }
    string Guid = StringExtensions.RandomString(12);

    class SourceFromDropDown
    {
        public string Text { get; set; }
        public SourceFromEnum Value { get; set; }
    }

    public IEnumerable<ListItem> ImageSourceLocations = GetEnumDisplayNames<SourceFromEnum>()
        .Where(x => x.Value == SourceFromEnum.Link || x.Value == SourceFromEnum.Reddit || x.Value == SourceFromEnum.Device);
    public IEnumerable<ListItem> VideoSourceLocations = GetEnumDisplayNames<SourceFromEnum>()
        .Where(x => x.Value == SourceFromEnum.Youtube || x.Value == SourceFromEnum.Reddit);

    string host;

    protected override void OnInitialized()
    {
        media.MediaProcessed += MediaProcessedEvent;
    }

    private void MediaProcessedEvent(object sender, bool e)
    {
        Serilog.Log.Debug("Media Processed");
        Refresh();
    }

    private void Refresh()
    {
        //this.StateHasChanged();
        this.InvokeAsync(() => this.StateHasChanged());
    }

    void IDisposable.Dispose()
    {
        media.MediaProcessed -= MediaProcessedEvent;
    }

    public void OnFileChange(UploadChangeEventArgs args)
    {
        // Console.WriteLine(args.Files[0].FileInfo.Name);
        media.Source = args.Files[0];
    }

    private void OnFileRemove(RemovingEventArgs args)
    {
        //foreach (var removeFile in args.FilesData)
        media.Source = null;
    }


}
