@page "/Edit"
@inherits EditBase
@using ThinBlueLieB.Bases
@using Microsoft.AspNetCore.WebUtilities
@using Dapper
@using MySql.Data.MySqlClient
@using Microsoft.AspNetCore.Identity;
@using Syncfusion.Blazor.DropDowns
@using ThinBlueLieB.Helper.Extensions
@using ThinBlueLieB.Helper
@using Syncfusion.Blazor.RichTextEditor
@using Syncfusion.Blazor.Buttons
@using static ThinBlueLieB.Searches.SearchClasses;
@using System.IO
@using Syncfusion.Blazor.Calendars
@inject NavigationManager navManager


<link rel="stylesheet" href="~/css/Submit.css" />
@if (!string.IsNullOrWhiteSpace(id) && model.Timelineinfos.Date != null)
{
    <AuthorizeView>
        <NotAuthorized>
            <div class="container">
                <h5>
                    Please
                    <a href="/Account/Login">Login</a> or
                    <a href="/Account/Register">Register</a>
                    to edit an event
                </h5>
            </div>
        </NotAuthorized>
        <Authorized Context="Auth">
            <div class="offset-lg-2 row container-fluid mr-0 pr-0" style="margin-bottom:100px;">
                <EditForm Model="model" OnValidSubmit="HandleValidSubmitAsync">
                    <ObjectGraphDataAnnotationsValidator />
                    <div class="col-lg-5 col-md-6 border-left border-right border-bottom">
                        <div class="d-block mb-0 pt-3 border-bottom mb-2">
                            <h4 class="mb-0 align-te">Information Submission Form</h4>
                        </div>
                        <div>
                            <div class="form-group">
                                <div id="datepicker-control">
                                    <SfDatePicker TValue="DateTime?" @bind-Value="@DateValue" Min="@MinDate" Max="@Today" Format="yyyy-MM-dd" Placeholder="Select a date" StrictMode="true">
                                    </SfDatePicker>
                                    <ValidationMessage For="@(() => model.Timelineinfos.Date)"></ValidationMessage>
                                </div>
                            </div>
                        </div>
                        <div class="form-row">
                            <div class="col-5 dropdown" style="position:relative;">
                                <div class="align">
                                    <div class="position-relative mb-1 mb-md-0"> <br /> <label class="position-absolute" style="top:-6px; font-size:14px; line-height:24px;">State</label></div>
                                    <SfDropDownList TItem="string" TValue="TimelineinfoEnums.StateEnum?" PopupHeight="230px" Placeholder="State" @bind-Value="@model.Timelineinfos.State" DataSource="@States">
                                    </SfDropDownList>
                                    <ValidationMessage For="@(() => model.Timelineinfos.State)"></ValidationMessage>
                                </div>
                            </div>
                            <div class="col-7">
                                <SfTextBox CssClass="e-filled" Placeholder="City" FloatLabelType="@FloatLabelType.Always" @bind-Value="model.Timelineinfos.City"></SfTextBox>
                                <ValidationMessage For="@(() => model.Timelineinfos.City)"></ValidationMessage>
                            </div>
                        </div>
                        <hr />
                        <div class="d-flex">
                            <h6 class="d-inline">
                                Fill out the following information for the Subject
                            </h6>
                            <div class="d-inline ml-auto" @onclick="AddSubject" @onclick:stopPropagation="false" @onclick:preventDefault>
                                <SfButton IconCss="e-btn-sb-icons e-add-icon" CssClass="e-small e-flat float-right" IsPrimary="true" IconPosition=@IconPosition.Right>
                                    Subject
                                </SfButton>
                            </div>
                        </div>
                        <div id="SubjectList">
                            @foreach ((var subject, Int32 i) in model.Subjects.Select((subject, i) => (subject, i)))
                            {
                                <Subject subject="subject" DeleteSubject="DeleteSubject" SuggestSubjects="SuggestSubjects"></Subject>
                                if (SimilarSubjects[i] != null)
                                {
                                    <SimilarPeople PersonListIndex="i" SetSameAs="SetSameAsSubject" People="SimilarSubjects[i]"></SimilarPeople>
                                }
                            }
                        </div>
                        <hr />
                        <div class="d-flex">
                            <h6 class="d-inline">
                                Fill out the following information for the Officer
                            </h6>
                            <div class="d-inline ml-auto" @onclick="AddOfficer" @onclick:stopPropagation="false" @onclick:preventDefault>
                                <SfButton IconCss="e-btn-sb-icons e-add-icon" CssClass="e-small e-flat float-right" IsPrimary="true" IconPosition=@IconPosition.Right>
                                    Officer
                                </SfButton>
                            </div>
                        </div>
                        <div id="OfficerList">
                            @foreach ((var officer, Int32 i) in model.Officers.Select((officer, i) => (officer, i)))
                            {
                                <Officer officer="officer" DeleteOfficer="DeleteOfficer" SuggestOfficers="SuggestOfficers"></Officer>
                                if (SimilarOfficers[i] != null)
                                {
                                    <SimilarPeople PersonListIndex="i" SetSameAs="SetSameAsOfficer" People="SimilarOfficers[i]"></SimilarPeople>
                                }
                            }
                        </div>
                        <hr />
                        <div class="form-group">
                            <label asp-for="Timelineinfos.Context" class="control-label">Use this section to fill in information about context around the event in the video. This could be things such as it being part of protests, the victim was previously detained, and anything related to the event that happened off-screen.</label>
                            <SfRichTextEditor CssClass="w-100" @bind-Value="@model.Timelineinfos.Context" EnableResize="true" EnableHtmlSanitizer="true" ShowCharCount="true">
                                <RichTextEditorPasteCleanupSettings></RichTextEditorPasteCleanupSettings>
                                <RichTextEditorToolbarSettings Items="@Tools"></RichTextEditorToolbarSettings>
                            </SfRichTextEditor>
                            <ValidationMessage For="@(() => model.Timelineinfos.Context)"></ValidationMessage>
                        </div>
                        <div class="form-group">
                            <button id="submit" type="submit" class="btn btn-primary">Submit</button>
                            <a asp-page="/Index" style="float:right">Back to Home</a>
                        </div>
                    </div>
                    <div class="col-lg-5 col-md-6">
                        <div class="row">
                            <div class="d-block border-top container-fluid border-bottom" @onclick:stopPropagation="false" @onclick:preventDefault>
                                <h4 class="pt-2">Add Media</h4>
                                <p class="mb-0" style="font-size:1em">
                                    Add Media relavent to the event, such as videos, images, news articles, etc.
                                    <SfButton IconCss="e-btn-sb-icons e-add-icon" CssClass="e-small e-flat float-right" @onclick="AddMedia" IsPrimary="true" IconPosition=@IconPosition.Right>
                                        Media
                                    </SfButton>
                                </p>
                            </div>
                            <div id="MediaList" class="container-fluid">
                                @foreach (var media in model.Medias)
                                {
                                    <MediaCard media="media" MoveMediaDown="MoveMediaDown" MoveMediaUp="MoveMediaUp" MoveMediaTop="MoveMediaTop" DeleteMedia="DeleteMedia"></MediaCard>
                                }
                            </div>
                        </div>
                    </div>
                </EditForm>
            </div>
        </Authorized>
    </AuthorizeView>
}
else
{
    <div class="container">
        <h6>Opps, this is not a valid url</h6>
    </div>
}

@code {
    string id;
    protected override async Task OnInitializedAsync()
    {
        var uri = new Uri(navManager.Uri);
        id = QueryHelpers.ParseQuery(uri.Query).TryGetValue("id", out var type) ? type.First() : "";
        if(!string.IsNullOrWhiteSpace(id))
        {
            Id = Convert.ToUInt32(id);
            model = await FetchDataAsync();
            //var similarOfficers = new List<SimilarPersonGeneral>();
            for (int i = 0; i < model.Officers.Count; i++)
            {
                SimilarOfficers.Add(new List<SimilarPersonGeneral> { });
            };
           // var similarSubjects = new List<SimilarPersonGeneral>();
            for (int i = 0; i < model.Subjects.Count; i++)
            {
                SimilarSubjects.Add(new List<SimilarPersonGeneral> { });
            };
            //SimilarOfficers.Add(similarOfficers);
            //SimilarSubjects.Add(similarSubjects);

            this.StateHasChanged();
        }
    }
}
