@page "/Submit"
@inherits SubmitBase
@inject NavigationManager NavManager
@inject SignInManager<ApplicationUser> signInManager
@inject UserManager<ApplicationUser> userManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject AutoMapper.IMapper mapper

@using DataAccessLibrary.UserModels
@using Dapper
@using MySql.Data.MySqlClient
@using Microsoft.AspNetCore.Identity;
@using Syncfusion.Blazor.DropDowns
@using ThinBlueLieB.Helper.Extensions
@using ThinBlueLieB.Helper
@using Syncfusion.Blazor.RichTextEditor
@using Syncfusion.Blazor.Buttons
@using static ThinBlueLieB.Searches.SearchClasses;
@using System.IO
@using Syncfusion.Blazor.Calendars
@using Ganss.XSS;

<style>
    body {
        overflow-x: hidden;
    }

    form {
        display: inherit;
    }

    @@font-face {
        font-family: 'button-icons';
        src: url(data:application/x-font-ttf;charset=utf-8;base64,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) format('truetype');
        font-weight: normal;
        font-style: normal;
    }

    .e-btn-sb-icons {
        font-family: 'button-icons';
        line-height: 1;
        font-style: normal;
        font-weight: normal;
        font-variant: normal;
        text-transform: none;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
    }

    .e-add-icon::before {
        content: '\e70a';
    }

    .e-richtexteditor .e-rte-content .e-content {
        min-height: 150px;
    }

    .e-file-select-wrap {
        padding: 0.2rem;
    }

    .e-close-icon:before {
        content: '\e745';
    }

    .e-double-arrow-up-icon:before {
        content: '\e7c5';
    }

    .e-chevron-up-icon:before {
        content: '\e734';
    }

    .e-chevron-down-icon:before {
        content: '\e705';
    }

    .e-primary.e-custom {
        color: #221e1e !important;
        background-color: #F8F9FA !important;
        border-color: #F8F9FA !important;
        padding-right: 5px;
        padding-left: 0px;
    }

        .e-primary.e-custom:hover {
            color: #314DB2 !important;
        }

        .e-primary.e-custom:focus, .e-primary.e-cuton:active {
            box-shadow: none !important;
        }

    .e-acrdn-header-content {
        width: 100% !important;
        position: relative;
    }
    .e-acrdn-content .e-acrdn-content {
        padding-left: 0.6rem !important;
    }
    .e-acrdn-header:hover .e-icons, .e-acrdn-header, .e-acrdn-header-content {
        text-decoration: none !important;
        color: inherit !important;
    }
</style>
<div class="offset-lg-2 row container-fluid mr-0 pr-0" style="margin-bottom:100px;">
    <EditForm Model="model" OnValidSubmit="HandleValidSubmitAsync">
        <ObjectGraphDataAnnotationsValidator />
        <div class="col-lg-5 col-md-6 border-left border-right border-bottom">
            <div class="d-block mb-0 pt-3 border-bottom mb-2">
                <h4 class="mb-0 align-te">Information Submission Form</h4>
            </div>
            <div>
                <div class="form-group">
                    <div id="datepicker-control">
                        <SfDatePicker TValue="DateTime?" @bind-Value="@DateValue" Min="@MinDate" Max="@Today" Format="yyyy-MM-dd" Placeholder="Select a date" StrictMode="true">
                            <DatePickerEvents TValue="DateTime?" ValueChange="@FindEvents"></DatePickerEvents>
                        </SfDatePicker>
                        <ValidationMessage For="@(() => model.Timelineinfos.Date)"></ValidationMessage>
                    </div>
                </div>
            </div>
            <div class="form-row">
                <div class="col-5 dropdown" style="position:relative;">
                    <div class="align">
                        <div class="position-relative mb-1 mb-md-0"> <br /> <label class="position-absolute" style="top:-6px; font-size:14px; line-height:24px;">State</label></div>
                        <SfDropDownList TItem="string" TValue="TimelineinfoEnums.StateEnum?" PopupHeight="230px" Placeholder="State" @bind-Value="@model.Timelineinfos.State" DataSource="@States">
                        </SfDropDownList>
                        <ValidationMessage For="@(() => model.Timelineinfos.State)"></ValidationMessage>
                    </div>
                </div>
                <div class="col-7">
                    <SfTextBox CssClass="e-filled" Placeholder="City" FloatLabelType="@FloatLabelType.Always" @bind-Value="model.Timelineinfos.City"></SfTextBox>
                    <ValidationMessage For="@(() => model.Timelineinfos.City)"></ValidationMessage>
                </div>
            </div>
            <div class="w-100 pt-3">
                <SfTextBox CssClass="e-filled" Placeholder="Title" FloatLabelType="@FloatLabelType.Always" @bind-Value="model.Timelineinfos.Title"></SfTextBox>
                <ValidationMessage For="@(() => model.Timelineinfos.Title)"></ValidationMessage>
            </div>
            <hr />
            <div class="d-flex">
                <h6 class="d-inline">
                    Fill out the following information for the Subject
                </h6>
                <div class="d-inline ml-auto" @onclick="AddSubject" @onclick:stopPropagation="false" @onclick:preventDefault>
                    <SfButton IconCss="e-btn-sb-icons e-add-icon" CssClass="e-small e-flat float-right" IsPrimary="true" IconPosition=@IconPosition.Right>
                        Subject
                    </SfButton>
                </div>
            </div>
            <div id="SubjectList">
                @foreach ((var subject, Int32 i) in model.Subjects.Select((subject, i) => (subject, i)))
                {
                    <Subject subject="subject" DeleteSubject="DeleteSubject" SuggestSubjects="SuggestSubjects"></Subject>
                    if (SimilarSubjects[i] != null)
                    {
                        <SimilarPeople PersonListIndex="i" SetSameAs="SetSameAsSubject" People="SimilarSubjects[i]"></SimilarPeople>
                    }
                }
            </div>
            <hr />
            <div class="d-flex">
                <h6 class="d-inline">
                    Fill out the following information for the Officer
                </h6>
                <div class="d-inline ml-auto" @onclick="AddOfficer" @onclick:stopPropagation="false" @onclick:preventDefault>
                    <SfButton IconCss="e-btn-sb-icons e-add-icon" CssClass="e-small e-flat float-right" IsPrimary="true" IconPosition=@IconPosition.Right>
                        Officer
                    </SfButton>
                </div>
            </div>
            <div id="OfficerList">
                @foreach ((var officer, Int32 i) in model.Officers.Select((officer, i) => (officer, i)))
                {
                    <Officer isSubmit="true" officer="officer" DeleteOfficer="DeleteOfficer" SuggestOfficers="SuggestOfficers"></Officer>
                    if (SimilarOfficers[i] != null)
                    {
                        <SimilarPeople PersonListIndex="i" SetSameAs="SetSameAsOfficer" People="SimilarOfficers[i]"></SimilarPeople>
                    }
                }
            </div>
            <hr />
            <div class="form-group">
                <label asp-for="Timelineinfos.Context" class="control-label">Use this section to fill in information about context around the event in the video. This could be things such as it being part of protests, the victim was previously detained, and anything related to the event that happened off-screen.</label>
                <SfRichTextEditor CssClass="w-100" @bind-Value="@model.Timelineinfos.Context" EnableResize="true" EnableHtmlSanitizer="true" ShowCharCount="true">
                    <RichTextEditorPasteCleanupSettings></RichTextEditorPasteCleanupSettings>
                    <RichTextEditorToolbarSettings Items="@Tools"></RichTextEditorToolbarSettings>
                </SfRichTextEditor>
                <ValidationMessage For="@(() => model.Timelineinfos.Context)"></ValidationMessage>
            </div>
            <div class="form-group">
                <button id="submit" type="submit" class="btn btn-primary">Submit</button>
                <a asp-page="/Index" style="float:right">Back to Home</a>
            </div>
        </div>
        <div class="col-lg-5 col-md-6">
            <div class="row">
                <div class="container-fluid d-block">
                    <h4 class="pt-2">Similar Events</h4>
                    <p class="mb-0 border-bottom" style="font-size:1em">
                        Here are Events that share a date with your event, check to see if your event is a duplicate.
                    </p>
                    <div id="VideoList">
                        @if (SimilarEvents.Count == 0)
                        {
                            <div class="container mt-2" style="min-height:100px;">
                                <h5>There are no similar or duplicate Events!</h5>
                            </div>
                        }
                        else
                        {
                            foreach (var Event in SimilarEvents)
                            {
                                <SimilarEvents Event="Event"></SimilarEvents>
                            }
                        }
                    </div>
                    @*<br />*@
                </div>
            </div>
            <div class="row">
                <div class="d-block border-top container-fluid border-bottom" @onclick:stopPropagation="false" @onclick:preventDefault>
                    <h4 class="pt-2">Add Media</h4>
                    <p class="mb-0" style="font-size:1em">
                        Add Media relavent to the event, such as videos, images, news articles, etc.                       
                    </p>
                </div>
                <div id="MediaList" class="container-fluid">
                    <CascadingValue Name="IsEdit" Value="false">
                        <MediaAccordion Medias="model.Medias" AddMedia="AddMedia" DeleteMedia="DeleteMedia" MoveMediaDown="MoveMediaDown" MoveMediaTop="MoveMediaTop" MoveMediaUp="MoveMediaUp">
                        </MediaAccordion>
                    </CascadingValue>                 
                </div>
            </div>
        </div>
    </EditForm>
</div>
@code {
        [CascadingParameter]
        private Task<AuthenticationState> _authState { get; set; }
    private AuthenticationState userState;
    protected async Task HandleValidSubmitAsync()
    {
        //display loading gif in modal while doing the processing

        //TODO add locked option in form for authed users with perms
        model.Timelineinfos.Locked = 0;
        string? userId;
        if (signInManager.IsSignedIn(userState.User))
        {
            userId = userManager.GetUserId(userState.User);
            //model.Timelineinfos.SubmittedBy = userId;
        }
        else
        {
            userId = null;
        }
        //TODO if user is has perms auto verify
        model.Timelineinfos.Verified = 1;
        int IdTimelineinfo;
        var sanitizer = new HtmlSanitizer();
        using (var connection = new MySqlConnection(ConfigHelper.GetConnectionString()))
        {
            var timelineSave = "INSERT INTO timelineinfo (`Date`, `State`, `City`, `Context`, `Locked`, `SubmittedBy`, `Verified`)" +
                               "VALUES (@date, @state, @city, @context, @locked, @submittedby, @verified);" +
                               "SELECT LAST_INSERT_ID();";

            //Set IdTimelineinfo and insert data into `timelineinfo` table
            IdTimelineinfo = connection.QuerySingle<int>(timelineSave, new
            {
                date = model.Timelineinfos.Date,
                state = model.Timelineinfos.State,
                city = model.Timelineinfos.City,
                context = sanitizer.Sanitize(model.Timelineinfos.Context),
                locked = model.Timelineinfos.Locked,
                submittedby = (string)userId, //nullable
                verified = model.Timelineinfos.Verified
            });


            foreach (var media in model.Medias)
            {
                string path;
                //if there is a file for the media save it to disk
                if (media.Source != null & media.SourceFrom == MediaEnums.SourceFromEnum.Device)
                {
                    var rand = StringExtensions.RandomString(12); //random string of 12 characters
                    path = ConfigHelper.GetUploadsDirectory() + rand;
                    FileStream filestream = new FileStream(path, FileMode.Create, FileAccess.Write);
                    media.Source.Stream.WriteTo(filestream);
                    filestream.Close();
                    media.Source.Stream.Close();
                }
                else
                {
                    path = media.SourcePath;
                }
                string mediaSql = "INSERT INTO media (`IdTimelineinfo`, `MediaType`, `SourcePath`, `Gore`, `SourceFrom`, `Blurb`, `Credit`, `SubmittedBy`, `Rank`) " +
                                  "VALUES (@idtimelineinfo, @mediatype, @sourcepath, @gore, @sourcefrom, @blurb, @credit, @submittedby, @rank);";
               await connection.ExecuteAsync(mediaSql, new
                    {
                        idtimelineinfo = IdTimelineinfo,
                        mediatype = media.MediaType,
                        sourcepath = path,
                        gore = media.Gore,
                        sourcefrom = media.SourceFrom,
                        blurb = media.Blurb,
                        credit = (string)media.Credit, //nullable
                        submittedby = (string)userId, //nullable
                        rank = media.ListIndex
                    });                
            }

            //Subject Table
            foreach (var subject in model.Subjects)
            {
                    if (subject.SameAsId == null)
                    {
                        //Create new subject
                        var subjectSql = "INSERT INTO subjects (`Name`, `Race`, `Sex`) " +
                                     "VALUES (@name, @race, @sex);" +
                                     "SELECT LAST_INSERT_ID();";
                        //Add to subjects table and return id
                        var IdSubject = connection.QuerySingle<int>(subjectSql, new
                        {
                            name = subject.Name,
                            race = subject.Race,
                            sex = subject.Sex
                        });

                        //Add to junction table
                        var junctionSql = "INSERT INTO timelineinfo_subject (`IdTimelineinfo`, `IdSubject`, `Armed`, `Age`)" +
                                          "VALUES (@idtimelineinfo, @idsubject, @armed, @age);";
                        connection.Execute(junctionSql, new
                        {
                            idtimelineinfo = IdTimelineinfo,
                            idsubject = IdSubject,
                            armed = Convert.ToByte(subject.Armed),
                            age = subject.Age
                        });
                    }
                    else
                    {
                        var junctionSql = "INSERT INTO timelineinfo_subject (`IdTimelineinfo`, `IdSubject`, `Armed`, `Age`)" +
                                         "VALUES (@idtimelineinfo, @idsubject, @armed, @age);";
                        connection.Execute(junctionSql, new
                        {
                            idtimelineinfo = IdTimelineinfo,
                            idsubject = subject.SameAsId,
                            armed = Convert.ToByte(subject.Armed),
                            age = (byte?)subject.Age
                        });
                    }
                
            }
            //Officer Table
            foreach (var officer in model.Officers)
            {  
                    if (officer.SameAsId == null)
                    {
                        //Create new officer
                        var officerSql = "INSERT INTO officers (`Name`, `Race`, `Sex`)" +
                                     "VALUES (@name, @race, @sex);" +
                                     "SELECT LAST_INSERT_ID();";
                        //Add to officers table and return id
                        var IdOfficer = connection.QuerySingle<int>(officerSql, new
                        {
                            name = officer.Name,
                            race = officer.Race,
                            sex = officer.Sex
                        });

                        //Add to junction table
                        var junctionSql = "INSERT INTO timelineinfo_officer (`IdTimelineinfo`, `IdOfficer`, `Age`, `Misconduct`, `Weapon`)" +
                                        "VALUES (@idtimelineinfo, @idofficer, @age, @misconduct, @weapon);";
                        connection.Execute(junctionSql, new
                        {
                            idtimelineinfo = IdTimelineinfo,
                            idofficer = IdOfficer,
                            age = (byte)officer.Age,
                            misconduct = officer.Misconduct.Sum(),
                            weapon = (int)officer.Weapon.Sum(),
                        });
                    }
                    else
                    {
                        var junctionSql = "INSERT INTO timelineinfo_officer (`IdTimelineinfo`, `IdOfficer`, `Age`, `Misconduct`, `Weapon`)" +
                                         "VALUES (@idtimelineinfo, @idofficer, @age, @misconduct, @weapon);";
                        connection.Execute(junctionSql, new
                        {
                            idtimelineinfo = IdTimelineinfo,
                            idofficer = officer.SameAsId,
                            age = (byte?)officer.Age,
                            misconduct = officer.Misconduct.Sum(),
                            weapon = officer.Weapon.Sum(),
                        });
                    }                
            }
        }
        if (true) //if successful submit
        {
            NavManager.NavigateTo("/Index");
        }
    }

    public List<ViewSimilar>? SimilarEvents { get; set; } = new List<ViewSimilar>();
    protected async void FindEvents(ChangedEventArgs<DateTime?> args)
    {
        model.Timelineinfos.Date = DateValue?.ToString("yyyy-MM-dd");
        SearchesSubmit searchesSubmit = new SearchesSubmit();
        SimilarEvents = await searchesSubmit.GetSimilar(args.Value?.ToString("yyyy-MM-dd"));
        this.StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        userState = await _authState;
        SearchesSubmit searchesSubmit = new SearchesSubmit();
        SimilarOfficers.Add(new List<SimilarPersonGeneral> { });
        SimilarSubjects.Add(new List<SimilarPersonGeneral> { });
        Today = DateTime.Today;
        MinDate = new DateTime(1776, 6, 4);
        DateValue = DateTime.Today;
        SimilarEvents = await searchesSubmit.GetSimilar(DateTime.Today.ToString("yyyy-MM-dd"));
    }

}