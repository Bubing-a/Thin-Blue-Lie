@page "/Submit"
@inherits SubmitBase
@inject Microsoft.Extensions.Options.IOptions<ConnectionStringService> searchess

@using ThinBlueLieB.Models;
@using Syncfusion.Blazor.DropDowns
@using ThinBlueLieB.Helper
@using Syncfusion.Blazor.RichTextEditor
@using Syncfusion.Blazor.Buttons
@using static ThinBlueLieB.Searches.SearchClasses;
<style>
    body {
        overflow-x: hidden;
    }

    form {
        display: inherit;
    }

    @@font-face {
        font-family: 'button-icons';
        src: url(data:application/x-font-ttf;charset=utf-8;base64,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) format('truetype');
        font-weight: normal;
        font-style: normal;
    }

    .e-btn-sb-icons {
        font-family: 'button-icons';
        line-height: 1;
        font-style: normal;
        font-weight: normal;
        font-variant: normal;
        text-transform: none;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
    }

    .e-add-icon::before {
        content: '\e70a';
    }

    .e-richtexteditor .e-rte-content .e-content {
        min-height: 150px;
    }

    .e-file-select-wrap {
        padding: 0.2rem;
    }

    .e-close-icon:before {
        content: '\e745';
    }

    .e-double-arrow-up-icon:before {
        content: '\e7c5';
    }

    .e-chevron-up-icon:before {
        content: '\e734';
    }

    .e-chevron-down-icon:before {
        content: '\e705';
    }

    .e-custom {
        color: #221e1e !important;
        background-color: white !important;
        border-color: white !important;
        padding-right: 0px;
        padding-left: 0px;
    }

        .e-custom:hover {
            color: #314DB2 !important;
        }
</style>
<div class="offset-lg-2 row container-fluid mr-0 pr-0" style="margin-bottom:100px;">
    <div class="col-lg-5 col-md-6 border-left border-right border-bottom">
        <EditForm Model="model" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="d-block mb-0 pt-3 border-bottom mb-2">
                <h4 class="mb-0 align-te">Information Submission Form</h4>
            </div>
            <div>
                <div class="form-group">
                    <div id="datepicker-control">
                        <SfDatePicker TValue="DateTime?" @bind-Value="@DateValue" Min="@MinDate" Max="@Today"></SfDatePicker>
                        @*<DatePickerEvents TValue="DateTime?" ValueChange="@FindEvents"></DatePickerEvents> this is causing a nullrefexception*@
                    </div>
                </div>
            </div>
            <div class="form-row">
                <div class="col-5 dropdown" style="position:relative;">
                    <SfDropDownList TItem="Extensions.ListItem" TValue="byte" PopupHeight="230px" FloatLabelType="@FloatLabelType.Auto" Index="1" Placeholder="State" @bind-Value="@model.Timelineinfos.State" DataSource="@States">
                        <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
                    </SfDropDownList>
                </div>
                <div class="col-7">
                    <SfTextBox CssClass="e-filled" Placeholder="City" FloatLabelType="@FloatLabelType.Always" @bind-Value="model.Timelineinfos.City"></SfTextBox>
                </div>
            </div>
            <hr />
            <div>
                <h6 class="d-inline">
                    Fill out the following information for the Subject
                </h6>
                <span @onclick="AddSubject" @onclick:stopPropagation="false" @onclick:preventDefault>
                    <SfButton IconCss="e-btn-sb-icons e-add-icon" CssClass="e-small e-flat float-right" IsPrimary="true" IconPosition=@IconPosition.Right>
                        Subject
                    </SfButton>
                </span>
            </div>
            <div id="SubjectList">
                @foreach (var subject in SubjectList)
                {
                    <Subject subject="subject" DeleteSubject="DeleteSubject" SuggestSubjects="SuggestSubjects"></Subject>
                }
            </div>
            <div>
                @if (SimilarSubjects != null)
                {
                    <SimilarPeople People="SimilarSubjects"></SimilarPeople>
                }
            </div>
            <hr />
            <div>
                <h6 class="d-inline">
                    Fill out the following information for the Officer
                </h6>
                <span @onclick="AddOfficer" @onclick:stopPropagation="false" @onclick:preventDefault>
                    <SfButton IconCss="e-btn-sb-icons e-add-icon" CssClass="e-small e-flat float-right" IsPrimary="true" IconPosition=@IconPosition.Right>
                        Officer
                    </SfButton>
                </span>
            </div>
            <div id="OfficerList">
                @foreach (var officer in OfficerList)
                {
                    <Officer officer="officer" DeleteOfficer="DeleteOfficer" SuggestOfficers="SuggestOfficers"></Officer>
                }
            </div>
            <div>
                @if (SimilarOfficers != null)
                {
                    <SimilarPeople People="SimilarOfficers"></SimilarPeople>
                }
            </div>
            <hr />
            <div class="form-group">
                <label asp-for="Timelineinfos.Context" class="control-label">Use this section to fill in information about context around the event in the video. This could be things such as it being part of protests, the victim was previously detained, and anything related to the event that happened off-screen.</label>
                <SfRichTextEditor CssClass="w-100" @bind-Value="@model.Timelineinfos.Context" EnableResize="true" EditorMode="EditorMode.Markdown" EnableHtmlSanitizer="true" ShowCharCount="true">
                    <RichTextEditorToolbarSettings Items="@Tools"></RichTextEditorToolbarSettings>
                </SfRichTextEditor>
                <ValidationMessage For="@(() => model.Timelineinfos.Context)"></ValidationMessage>
            </div>
            <div class="form-group">
                <input id="submit" type="button" value="Submit" class="btn btn-primary" />
                <a asp-page="/Index" style="float:right">Back to Home</a>
            </div>
        </EditForm>
    </div>
    <div class="col-lg-5 col-md-6">
        <div class="row">
            <div class="container-fluid d-block">
                <h4 class="pt-2">Similar Videos</h4>
                <p class="mb-0 border-bottom" style="font-size:1em">
                    Here are Events that share the a date with the information you are filling out, please check to see if your event is a duplicate.
                </p>
                <div id="VideoList">
                    @*<SimilarEvents></SimilarEvents>*@
                </div>
                <br />
            </div>
        </div>
        <div class="row">
            <div class="d-block border-top container-fluid border-bottom">
                <h4 class="pt-2">Add Media</h4>
                <p class="mb-0" style="font-size:1em">
                    Add Media relavent to the event, such as videos, images, news articles, etc.
                    <SfButton IconCss="e-btn-sb-icons e-add-icon" CssClass="e-small e-flat float-right" @onclick="AddMedia" IsPrimary="true" IconPosition=@IconPosition.Right>
                        Media
                    </SfButton>
                </p>
            </div>
            <div id="MediaList" class="container-fluid">
                @foreach (var media in MediaList)
                {
                    <MediaCard media="media" MoveMediaDown="MoveMediaDown" MoveMediaUp="MoveMediaUp" MoveMediaTop="MoveMediaTop" DeleteMedia="DeleteMedia"></MediaCard>
                }
            </div>
            <!--<div>
                <div class="container">
                    <button class="btn btn-primary mx-auto" id="MoreMedia">
                        Media-->
            @*<i class="align-bottom" style="height:1.2rem; width:1.2rem; margin-bottom:.2rem;" data-feather="plus-circle"></i>*@
            <!--</button>-->
            @*<input type="submit" value="submit" class="btn btn-primary" />*@
            <!--</div>
            </div>-->
        </div>
    </div>
</div>
@code {
    //protected async Task FindOfficers(string Name)
    //{
    //    SimilarPeople = await searches.SearchOfficer(Name);
    //}
    //protected async Task<List<ViewSimilar>> FindEvents(DateTime date)
    //{
    //    SimilarEvents = await searches.GetSimilar(date.ToString("yyyy-MM-dd"));
    //    return SimilarEvents;
    //}
    //protected async void FindEvents(Syncfusion.Blazor.Calendars.ChangedEventArgs<DateTime?> args)
    //{
    //    Console.WriteLine(args);
    //    SimilarEvents = await searches.GetSimilar(args.Value.ToString());
    //    //return SimilarEvents;
    //}

    public List<ViewMedia> MediaList { get; set; } = new List<ViewMedia>
{
         new ViewMedia{ ListIndex = 0} //Intialize page with one card
    };
    public List<ViewSubject> SubjectList { get; set; } = new List<ViewSubject>
{
        new ViewSubject { ListIndex = 0}
    };
    public List<ViewOfficer> OfficerList { get; set; } = new List<ViewOfficer>
{
        new ViewOfficer { ListIndex = 0}
    };

    private void AddMedia()
    {
        var newMediaItem = new ViewMedia { ListIndex = MediaList.Count };
        MediaList.Add(newMediaItem);
    }
    1
    private void AddSubject()
    {
        var newSubjectItem = new ViewSubject { ListIndex = SubjectList.Count };
        SubjectList.Add(newSubjectItem);
    }
    private void AddOfficer()
    {
        var newOfficerItem = new ViewOfficer { ListIndex = OfficerList.Count };
        OfficerList.Add(newOfficerItem);
    }

    public List<SimilarPerson> SimilarSubjects { get; set; }
    private async void SuggestSubjects(string inputName)
    {
        await Task.Delay(1 * 1000); //wait a second
        SearchesSubmit searchesSubmit = new SearchesSubmit(searchess);
        //TODO don't do suggest if name is too short or something
        SimilarSubjects = await searchesSubmit.SearchSubject(inputName);
        this.StateHasChanged();
    }

    public List<SimilarPerson> SimilarOfficers { get; set; }
    private async void SuggestOfficers(string inputName)
    {
        await Task.Delay(1 * 1000); //wait a second
        SearchesSubmit searchesSubmit = new SearchesSubmit(searchess);
        //TODO don't do suggest if name is too short or something
        SimilarOfficers = await searchesSubmit.SearchOfficer(inputName);
        this.StateHasChanged();
    }

    private void MoveMediaUp(int Index)
    {
        if (Index != 0)
        {
            var item = MediaList[Index]; //Get Card
            MediaList.RemoveAt(Index); //Remove Card
            MediaList.Insert(Index - 1, item); //Put Card in place above where it was
            MediaList[Index].ListIndex = Index; //Set ListIndex to fit it's position
            MediaList[Index - 1].ListIndex = Index - 1; //do above to item above
        }
    }

    private void MoveMediaDown(int Index)
    {
        if (Index != MediaList.Count - 1)
        {
            var item = MediaList[Index]; //Get Card
            MediaList.RemoveAt(Index); //Remove Card
            MediaList.Insert(Index + 1, item); //Put Card in place below where it was
            MediaList[Index].ListIndex = Index; //Set ListIndex to fit it's position
            MediaList[Index + 1].ListIndex = Index + 1; //do above to item below
        }
    }

    private void MoveMediaTop(int Index)
    {
        if (Index != 0)
        {
            var item = MediaList[Index]; //Get Card
            MediaList.RemoveAt(Index); //Remove Card
            MediaList.Insert(0, item); //Put Card at Top
            MediaList[Index].ListIndex = 0; //Set ListIndex to fit it's position
            for (int i = 0; i < MediaList.Count; i++)
            {
                MediaList[i].ListIndex = i;
            }
        }
    }

    private void DeleteMedia(int Index)
    {
        MediaList.RemoveAt(Index);
        for (int i = 0; i < MediaList.Count; i++)
        {
            MediaList[i].ListIndex = i;
        }
    }

    private void DeleteSubject(int Index)
    {
        SubjectList.RemoveAt(Index);
        for (int i = 0; i < SubjectList.Count; i++)
        {
            SubjectList[i].ListIndex = i;
        }

    }

    private void DeleteOfficer(int Index)
    {
        OfficerList.RemoveAt(Index);
        for (int i = 0; i < OfficerList.Count; i++)
        {
            OfficerList[i].ListIndex = i;
        }
    }
}





