@page "/Submit"
@inherits SubmitBase
@inject NavigationManager NavManager

@using ThinBlueLieB.Models;
@using Syncfusion.Blazor.DropDowns
@using ThinBlueLieB.Helper
@using Syncfusion.Blazor.RichTextEditor
@using Syncfusion.Blazor.Buttons
@using static ThinBlueLieB.Searches.SearchClasses;

<style>
    body {
        overflow-x: hidden;
    }

    form {
        display: inherit;
    }

    @@font-face {
        font-family: 'button-icons';
        src: url(data:application/x-font-ttf;charset=utf-8;base64,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) format('truetype');
        font-weight: normal;
        font-style: normal;
    }

    .e-btn-sb-icons {
        font-family: 'button-icons';
        line-height: 1;
        font-style: normal;
        font-weight: normal;
        font-variant: normal;
        text-transform: none;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
    }

    .e-add-icon::before {
        content: '\e70a';
    }

    .e-richtexteditor .e-rte-content .e-content {
        min-height: 150px;
    }

    .e-file-select-wrap {
        padding: 0.2rem;
    }

    .e-close-icon:before {
        content: '\e745';
    }

    .e-double-arrow-up-icon:before {
        content: '\e7c5';
    }

    .e-chevron-up-icon:before {
        content: '\e734';
    }

    .e-chevron-down-icon:before {
        content: '\e705';
    }

    .e-custom {
        color: #221e1e !important;
        background-color: white !important;
        border-color: white !important;
        padding-right: 0px;
        padding-left: 0px;
    }

        .e-custom:hover {
            color: #314DB2 !important;
        }
</style>
<div class="offset-lg-2 row container-fluid mr-0 pr-0" style="margin-bottom:100px;">
    <EditForm Model="model" OnValidSubmit="@HandleValidSubmitAsync">
        <ObjectGraphDataAnnotationsValidator />
        <div class="col-lg-5 col-md-6 border-left border-right border-bottom">
            <div class="d-block mb-0 pt-3 border-bottom mb-2">
                <h4 class="mb-0 align-te">Information Submission Form</h4>
            </div>
            <div>
                <div class="form-group">
                    <div id="datepicker-control">
                        <SfDatePicker TValue="DateTime?" @bind-Value="@DateValue" Min="@MinDate" Max="@Today" Format="yyyy-MM-dd" Placeholder="Select a date" StrictMode="true">
                            <DatePickerEvents TValue="DateTime?" ValueChange="@FindEvents"></DatePickerEvents>
                        </SfDatePicker>
                    </div>
                </div>
            </div>
            <div class="form-row">
                <div class="col-5 dropdown" style="position:relative;">
                    <SfDropDownList TItem="Extensions.ListItem" TValue="byte" PopupHeight="230px" FloatLabelType="@FloatLabelType.Auto" Index="1" Placeholder="State" @bind-Value="@model.Timelineinfos.State" DataSource="@States">
                        <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
                    </SfDropDownList>
                </div>
                <div class="col-7">
                    <SfTextBox CssClass="e-filled" Placeholder="City" FloatLabelType="@FloatLabelType.Always" @bind-Value="model.Timelineinfos.City"></SfTextBox>
                </div>
            </div>
            <hr />
            <div class="d-flex">
                <h6 class="d-inline">
                    Fill out the following information for the Subject
                </h6>
                <div class="d-inline ml-auto" @onclick="AddSubject" @onclick:stopPropagation="false" @onclick:preventDefault>
                    <SfButton IconCss="e-btn-sb-icons e-add-icon" CssClass="e-small e-flat float-right" IsPrimary="true" IconPosition=@IconPosition.Right>
                        Subject
                    </SfButton>
                </div>
            </div>
            <div id="SubjectList">
                @foreach ((var subject, Int32 i) in model.Subjects.Select((subject, i) => (subject, i)))
                {
                    <Subject subject="subject" DeleteSubject="DeleteSubject" SuggestSubjects="SuggestSubjects"></Subject>
                    if (SimilarSubjects[i] != null)
                    {
                        <SimilarPeople PersonListIndex="i" SetSameAs="SetSameAsSubject" People="SimilarSubjects[i]"></SimilarPeople>
                    }
                }
            </div>
            <hr />
            <div class="d-flex">
                <h6 class="d-inline">
                    Fill out the following information for the Officer
                </h6>
                <div class="d-inline ml-auto" @onclick="AddOfficer" @onclick:stopPropagation="false" @onclick:preventDefault>
                    <SfButton IconCss="e-btn-sb-icons e-add-icon" CssClass="e-small e-flat float-right" IsPrimary="true" IconPosition=@IconPosition.Right>
                        Officer
                    </SfButton>
                </div>
            </div>
            <div id="OfficerList">
                @foreach ((var officer, Int32 i) in model.Officers.Select((officer, i) => (officer, i)))
                {
                    <Officer officer="officer" DeleteOfficer="DeleteOfficer" SuggestOfficers="SuggestOfficers"></Officer>
                    if (SimilarOfficers[i] != null)
                    {
                        <SimilarPeople PersonListIndex="i" SetSameAs="SetSameAsOfficer" People="SimilarOfficers[i]"></SimilarPeople>
                    }
                }
            </div>
            <hr />
            <div class="form-group">
                <label asp-for="Timelineinfos.Context" class="control-label">Use this section to fill in information about context around the event in the video. This could be things such as it being part of protests, the victim was previously detained, and anything related to the event that happened off-screen.</label>
                <SfRichTextEditor CssClass="w-100" @bind-Value="@model.Timelineinfos.Context" EnableResize="true" EditorMode="EditorMode.Markdown" EnableHtmlSanitizer="true" ShowCharCount="true">
                   <RichTextEditorPasteCleanupSettings PlainText="true"></RichTextEditorPasteCleanupSettings>
                    <RichTextEditorToolbarSettings Items="@Tools"></RichTextEditorToolbarSettings>
                </SfRichTextEditor>
                <ValidationMessage For="@(() => model.Timelineinfos.Context)"></ValidationMessage>
            </div>
            <div class="form-group">
                <button id="submit" type="submit" class="btn btn-primary">Submit</button>
                <a asp-page="/Index" style="float:right">Back to Home</a>
            </div>
        </div>
        <div class="col-lg-5 col-md-6">
            <div class="row">
                <div class="container-fluid d-block">
                    <h4 class="pt-2">Similar Videos</h4>
                    <p class="mb-0 border-bottom" style="font-size:1em">
                        Here are Events that share the a date with the information you are filling out, please check to see if your event is a duplicate.
                    </p>
                    <div id="VideoList">
                        @if (SimilarEvents.Count == 0)
                        {
                            <div class="container mt-2" style="min-height:100px;">
                                <h5>There are no similar or duplicate Events!</h5>
                            </div>
                        }
                        else
                        {
                            foreach (var Event in SimilarEvents)
                            {
                                <SimilarEvents Event="Event"></SimilarEvents>
                            }
                        }
                    </div>
                    @*<br />*@
                </div>
            </div>
            <div class="row">
                <div class="d-block border-top container-fluid border-bottom" @onclick:stopPropagation="false" @onclick:preventDefault>
                    <h4 class="pt-2">Add Media</h4>
                    <p class="mb-0" style="font-size:1em">
                        Add Media relavent to the event, such as videos, images, news articles, etc.
                        <SfButton IconCss="e-btn-sb-icons e-add-icon" CssClass="e-small e-flat float-right" @onclick="AddMedia" IsPrimary="true" IconPosition=@IconPosition.Right>
                            Media
                        </SfButton>
                    </p>
                </div>
                <div id="MediaList" class="container-fluid">
                    @foreach (var media in model.Medias)
                    {
                        <MediaCard media="media" MoveMediaDown="MoveMediaDown" MoveMediaUp="MoveMediaUp" MoveMediaTop="MoveMediaTop" DeleteMedia="DeleteMedia"></MediaCard>
                    }
                </div>
            </div>
        </div>
    </EditForm>
</div>
@code {
    protected async Task HandleValidSubmitAsync()
    {
        //display loading gif in modal while doing the processing
        //fill out model with all values

        // Tables:
        //   Timelineinfo
        //     --DateValue = model.Timelineinfo.Date
        //     --Locked default to 0
        //     --SubmittedBy
        //     --Verified 0 unless user is past certain point
        //   Media
        //     --SourceFrom
        //     --IdTimelineinfo
        //     --File Upload

        //   Officers
        //     --Same As If true fill out information only in Junction table
        //   Subjects
        //     --Same As

        //   Timelineinfo_Subject
        //     --Armed
        //     --Age
        //   Timelineinfo_Officer
        //     --Age
        //     --Weapons Add together values in int[]
        //     --Misconducts Add together values in int[]

        //Save date to correct tables
        if (true) //if sucessful submit
        {
            NavManager.NavigateTo("/Index");
        }
    }

    public List<ViewSimilar>? SimilarEvents { get; set; } = new List<ViewSimilar>();
    protected async void FindEvents(ChangedEventArgs<DateTime?> args)
    {
        SearchesSubmit searchesSubmit = new SearchesSubmit();
        SimilarEvents = await searchesSubmit.GetSimilar(args.Value?.ToString("yyyy-MM-dd"));
        this.StateHasChanged();
        //SimilarEvents = await searchesSubmit.GetSimilar(DateValue?.ToString("yyyy-MM-dd"));
        //return SimilarEvents;
    }
    public DateTime Today { get; set; }
    public DateTime MinDate { get; set; }
    public DateTime? DateValue { get; set; } //model.Timelineinfos.Date

    protected override async Task OnInitializedAsync()
    {
        SearchesSubmit searchesSubmit = new SearchesSubmit();
        SimilarEvents = await searchesSubmit.GetSimilar(DateTime.Today.ToString("yyyy-MM-dd"));
        SimilarOfficers.Add(new List<SimilarPersonGeneral> { });
        SimilarSubjects.Add(new List<SimilarPersonGeneral> { });
        Today = DateTime.Today;
        MinDate = new DateTime(1950, 1, 1);
        DateValue = DateTime.Today;
        // DateValue = new DateTime(DateTime.Today.Year, DateTime.Now.Month, DateTime.Today.Day);
    }

    private void SetSameAsSubject(Tuple<int,int> tuple)
    {
        model.Subjects[tuple.Item2].SameAsId = tuple.Item1;
        SimilarSubjects[tuple.Item2] = new List<SimilarPersonGeneral>();
    }
    private void SetSameAsOfficer(Tuple<int, int> tuple)
    {
        model.Officers[tuple.Item2].SameAsId = tuple.Item1;
        SimilarOfficers[tuple.Item2] = new List<SimilarPersonGeneral>();
    }

    private void AddMedia()
    {
        var newMediaItem = new ViewMedia { ListIndex = model.Medias.Count };
        model.Medias.Add(newMediaItem);
    }

    private void AddSubject()
    {
        var newSubjectItem = new ViewSubject { ListIndex = model.Subjects.Count };
        model.Subjects.Add(newSubjectItem);
        SimilarSubjects.Add(new List<SimilarPersonGeneral> { });
    }
    private void AddOfficer()
    {
        var newOfficerItem = new ViewOfficer { ListIndex = model.Officers.Count };
        model.Officers.Add(newOfficerItem);
        SimilarOfficers.Add(new List<SimilarPersonGeneral> { });
    }

    public List<List<SimilarPersonGeneral>> SimilarSubjects { get; set; } = new List<List<SimilarPersonGeneral>>();
    private async void SuggestSubjects(SimilarPersonCallback personCallback)
    {
        SearchesSubmit searchesSubmit = new SearchesSubmit();
        //TODO don't do suggest if name is too short or something
        var similarSubject = await searchesSubmit.SearchSubject(personCallback.Name);
        SimilarSubjects[personCallback.Index] = similarSubject;
        this.StateHasChanged();
    }

    public List<List<SimilarPersonGeneral>> SimilarOfficers { get; set; } = new List<List<SimilarPersonGeneral>>();
    private async void SuggestOfficers(SimilarPersonCallback personCallback)
    {
        SearchesSubmit searchesSubmit = new SearchesSubmit();
        //TODO don't do suggest if name is too short or something
        var similarOfficer = await searchesSubmit.SearchOfficer(personCallback.Name);
        SimilarOfficers[personCallback.Index] = similarOfficer;
        this.StateHasChanged();
    }

    private void MoveMediaUp(int Index)
    {
        if (Index != 0)
        {
            var item = model.Medias[Index]; //Get Card
            model.Medias.RemoveAt(Index); //Remove Card
            model.Medias.Insert(Index - 1, item); //Put Card in place above where it was
            model.Medias[Index].ListIndex = Index; //Set ListIndex to fit it's position
            model.Medias[Index - 1].ListIndex = Index - 1; //do above to item above
        }
    }

    private void MoveMediaDown(int Index)
    {
        if (Index != model.Medias.Count - 1)
        {
            var item = model.Medias[Index]; //Get Card
            model.Medias.RemoveAt(Index); //Remove Card
            model.Medias.Insert(Index + 1, item); //Put Card in place below where it was
            model.Medias[Index].ListIndex = Index; //Set ListIndex to fit it's position
            model.Medias[Index + 1].ListIndex = Index + 1; //do above to item below
        }
    }

    private void MoveMediaTop(int Index)
    {
        if (Index != 0)
        {
            var item = model.Medias[Index]; //Get Card
            model.Medias.RemoveAt(Index); //Remove Card
            model.Medias.Insert(0, item); //Put Card at Top
            model.Medias[Index].ListIndex = 0; //Set ListIndex to fit it's position
            for (int i = 0; i < model.Medias.Count; i++)
            {
                model.Medias[i].ListIndex = i;
            }
        }
    }

    private void DeleteMedia(int Index)
    {
        model.Medias.RemoveAt(Index);
        for (int i = 0; i < model.Medias.Count; i++)
        {
            model.Medias[i].ListIndex = i;
        }
    }

    private void DeleteSubject(int Index)
    {
        model.Subjects.RemoveAt(Index);
        SimilarSubjects.RemoveAt(Index);
        //Resetting List Indexes
        for (int i = 0; i < model.Subjects.Count; i++)
        {
            model.Subjects[i].ListIndex = i;
        }

    }

    private void DeleteOfficer(int Index)
    {
        model.Officers.RemoveAt(Index);
        SimilarOfficers.RemoveAt(Index);
        //Resetting List Indexes
        for (int i = 0; i < model.Officers.Count; i++)
        {
            model.Officers[i].ListIndex = i;
        }
    }
}