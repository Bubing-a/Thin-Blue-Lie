@using ThinBlueLieB.ViewModels
@using static ThinBlueLieB.Helper.Extensions.EnumExtensions
@using static ThinBlueLieB.Helper.Extensions.StringExtensions
@using static ThinBlueLieB.Models.ViewSimilar;
@using Syncfusion.Blazor.Spinner
@using Syncfusion.Blazor.Popups 
@inject AutoMapper.IMapper mapper

<style>
    .card-title{
        margin-bottom: .5rem;
    }
   
</style>
@if (Information == null)
{
    <div class="col-lg-9">
        <div class="mx-auto">
            <SfSpinner Type="@SpinnerType.Material"></SfSpinner>
        </div>
    </div>
}
else
{
<div class="col-md-2 h-100 mx-auto mx-md-0 p-md-0" style="max-width:400px;">
    <div class="dataCard h-100 card border-dark mb-3 w-100" style="min-width:175px;">
        <div class="card-header text-black">
            @(Information.Date.ToString("MMMM d") + GetDaySuffix(Information.Date.Day) + ", " + Information.Date.Year.ToString())
        </div>
        <div class="card-body text-dark pb-0">
           <div> <h5 class="card-title mb-0"> @Information.City, @GetEnumDisplayName((TimelineinfoEnums.StateEnum)Information.State)</h5>
            <hr class="mt-0 pb-0 mb-2 pt-0" /></div>

            @*<h6 class="text-left mb-0">Subject's Information</h6>
            <hr style="height:1px;" class="mt-0 pb-0 mb-0 pt-0" />*@
            <div class="people">
                <span class="similar-bold">
                    <strong>Subject@(subjectsDetails.Count != 1? "s:" : ":")</strong>
                </span>
                @if (subjectsDetails.Count > 1)
                {
                    <ul class="people-list">
                        @foreach (var subject in subjectsDetails)
                        {
                            <li>
                                @subject
                            </li>
                        }
                    </ul>
                }
                else
                {
                    <span class="single-person">@subjectsDetails[0]</span>
                }
            </div>
            @*<h6 class="text-left mb-0">Officers's Information</h6>*@
            <div class="people">
                <span class="similar-bold">
                    <strong>Officer@(officersDetails.Count != 1? "s:" : ":")</strong>
                </span>
                @if (officersDetails.Count > 1)
                {
                    <ul class="people-list">
                        @foreach (var officer in officersDetails)
                        {
                            <li>
                                @officer
                            </li>
                        }
                    </ul>
                }
                else
                {
                    <span class="single-person">@officersDetails[0]</span>
                }
            </div>
        </div>
        <div class="card-footer">
            <a href="/Edit?id=@Information.IdTimelineinfo">Edit</a>
            <a href="javascript:void" @onclick="@(() => showFlagPopover = true)">Flag</a>
            <SfDialog ShowCloseIcon="true" ID="prompt_dialog" @bind-Visible="@showFlagPopover" Target="#target" Width="240px">
                <DialogTemplates>
                    <Header>
                        Flag Content
                    </Header>
                    <Content>
                      <Flag IdTimelineinfo="Information.IdTimelineinfo"></Flag>
                    </Content>
                </DialogTemplates>
                <DialogPositionData X="center" Y="center"></DialogPositionData>
            </SfDialog>
        </div>
    </div>
</div>
}
@code {
    [Parameter]
    public Timelineinfo Information { get; set; }
    [Parameter]
    public List<DisplayOfficer> Officers { get; set; }
    [Parameter]
    public List<DisplaySubject> Subjects { get; set; }

    List<string> subjectsDetails;
    List<string> officersDetails;
    string subjectList;
    string officerList;
    bool showFlagPopover = false;

    protected override void OnInitialized()
    {
        subjectsDetails = GetSummaryList(mapper.Map<List<DisplaySubject>, List<ViewSimilarPerson>>(Subjects));
        officersDetails = GetSummaryList(mapper.Map<List<DisplayOfficer>, List<ViewSimilarPerson>>(Officers));
        subjectList = CommaQuibbling(subjectsDetails);
        officerList = CommaQuibbling(officersDetails);
    }
}
