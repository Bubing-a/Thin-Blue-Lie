@using ThinBlueLieB.ViewModels
@using static ThinBlueLieB.Helper.Extensions.EnumExtensions
@using static ThinBlueLieB.Helper.Extensions.StringExtensions
@using static ThinBlueLieB.Models.ViewSimilar;
@using Syncfusion.Blazor.Spinner
@inject AutoMapper.IMapper mapper

@if (Information == null)
{
    <div class="col-lg-9">
        <div class="mx-auto">
            <SfSpinner Type="@SpinnerType.Material"></SfSpinner>
        </div>
    </div>
}
else
{
<div class="col-md-2 mx-auto mx-md-0 p-md-0" style="max-width:400px;">
    <div class="dataCard card border-dark mb-3 w-100" style="min-width:175px;">
        <div class="card-header text-black">
            @(Information.Date.ToString("MMMM d") + GetDaySuffix(Information.Date.Day) + ", " + Information.Date.Year.ToString())
        </div>
        <div class="card-body text-dark pb-0">
            <h5 class="card-title mb-0"></h5>
            <hr class="mt-0 pb-0 mb-0 pt-0" />
            <ul class="list-group list-group-flush">
                <li class="brokencard list-group-item">
                    @Information.City, @GetEnumDisplayName((TimelineinfoEnums.StateEnum)Information.State)
                </li>
            </ul>
            <h5 class="card-title text-left mb-0">Officer's Information</h5>
            <hr style="height:1px;" class="mt-0 pb-0 mb-0 pt-0" />
            <div class="people">
                <span class="similar-bold">
                    <strong>Subject@(subjectsDetails.Count != 1? "s:" : ":")</strong>
                </span>
                @if (subjectsDetails.Count > 1)
                {
                    <ul class="people-list">
                        @foreach (var subject in subjectsDetails)
                        {
                            <li>
                                @subject
                            </li>
                        }
                    </ul>
                }
                else
                {
                    <span class="single-person">@subjectsDetails[0]</span>
                }
            </div>
        </div>
        <h5 class="card-title text-left mb-0">Victim's Information</h5>
        <div class="people">
            <span class="similar-bold">
                <strong>Officer@(officersDetails.Count != 1? "s:" : ":")</strong>
            </span>
            @if (officersDetails.Count > 1)
            {
                <ul class="people-list">
                    @foreach (var officer in officersDetails)
                    {
                        <li>
                            @officer
                        </li>
                    }
                </ul>
            }
            else
            {
                <span class="single-person">@officersDetails[0]</span>
            }
        </div>
    </div>
    <div class="card-footer">
        <div class="row">
            <div class="col-6 px-0 offset-1">
                @*<a class="btn btn-primary position-relative" href="/Edit?id=@Timelineinfo.Data.IdTimelineinfo" data-placement="top"
                       data-toggle="tooltip" title="Edit info">
                        Incorrect Info?
                    </a>*@
            </div>
            <div class="col-5 px-0">
                <a tabindex="0" class="btn btn-danger position-relative flag" data-placement="top" role="button" data-html="true" data-toggle="popover" data-trigger="click" title="Report"
                   data-content=''>
                    Flag ⚐
                </a>
            </div>
        </div>
    </div>
</div>
}
@code {
    [Parameter]
    public Timelineinfo Information { get; set; }
    [Parameter]
    public List<DisplayOfficer> Officers { get; set; }
    [Parameter]
    public List<DisplaySubject> Subjects { get; set; }
    List<string> subjectsDetails;
    List<string> officersDetails;
    string subjectList;
    string officerList;
    protected override void OnInitialized()
    {
        subjectsDetails = GetSummaryList(mapper.Map<List<DisplaySubject>, List<ViewSimilarPerson>>(Subjects));
        officersDetails = GetSummaryList(mapper.Map<List<DisplayOfficer>, List<ViewSimilarPerson>>(Officers));
        subjectList = CommaQuibbling(subjectsDetails);
        officerList = CommaQuibbling(officersDetails);
    }
}
