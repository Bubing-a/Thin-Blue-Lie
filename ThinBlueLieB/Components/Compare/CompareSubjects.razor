@using ThinBlueLieB.Helper.Algorithms 
@using DiffPlex.DiffBuilder;
@using DiffPlex.DiffBuilder.Model;
@inject ISideBySideDiffBuilder sideBySide

@if (Done == false)
{
    <h6>Loading...</h6>
}
else
{
    <div class="d-block">
        <h5 class="border-bottom">Subject@(Subjects.Count > 1? "s'" : "'s") Information</h5>
        @foreach ((var subjectPair, Int32 i) in Subjects.Select((officer, i) => (officer, i)))
        {
            <CompareSubjectSingle Model="Subjectdiff[i]" SubjectPair="subjectPair"></CompareSubjectSingle>
        }
    </div>
}

@code {
    private List<Tuple<DBSubject, DBSubject>> Subjects { get; set; }
    [Parameter]
    public List<DBSubject> OldSubjects { get; set; }
    [Parameter]
    public List<DBSubject> NewSubjects { get; set; }
    bool Done = false;
    private List<SideBySideDiffModel?> Subjectdiff = new List<SideBySideDiffModel?>();

    protected override void OnParametersSet()
    {
        Subjects = new List<Tuple<DBSubject, DBSubject>>();

        var PairSubjects = new PairVersions();
        Subjects = PairSubjects.PairSubjects(OldSubjects, NewSubjects);

        foreach (var pairing in Subjects)
        {
            try
            {
                //try to compare officers with the same idOfficer and build a model off of that
                Subjectdiff.Add(sideBySide.BuildDiffModel(pairing.Item1.Name, pairing.Item2.Name));
            }
            catch (Exception)
            {
                Subjectdiff.Add(null);
            }
        }
        Done = true;
    }
}
