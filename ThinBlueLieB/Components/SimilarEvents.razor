@using ThinBlueLieB.Models;
@using DataAccessLibrary.Enums;
@using ThinBlueLieB.Helper;
@using ThinBlueLieB.Helper.Extensions;

<style>
    .location {
        text-decoration: underline;
        font-size: 1.2rem;
        padding-top: 0.1rem;
        text-decoration-skip: none !important;
    }

    .people-list {
        display: inline-block;
        padding-left: 1.5rem;
        margin-bottom: 0px;
    }
    .people{
        margin-bottom: .3rem;
    }
    .similar-bold {
        position: relative;
        vertical-align: top;
    }
    .single-person{

    }

</style>

<div id="likeVideos" class="mt-2">
    <div class="card border-dark mb-3 ml-1">
        <div class="card-header">
            @(Event.Timelineinfo.Date.ToString("MMMM d") + StringExtensions.GetDaySuffix(Event.Timelineinfo.Date.Day) + ", " + Event.Timelineinfo.Date.Year.ToString())
            </div> 
        <div class="card-body text-dark pt-2">
            <div class="d-block">
                <div class="d-inline-block">
                    <p class="location">@Event.Timelineinfo.City, @EnumExtensions.GetEnumDisplayName((TimelineinfoEnums.StateEnum)Event.Timelineinfo.State)</p>
                    <div class="people">
                        <span class="similar-bold">
                            <strong>Subject@(subjectsDetails.Count != 1? "s:" : ":")</strong>
                        </span>
                        @if (subjectsDetails.Count > 1)
                        {
                            <ul class="people-list">
                                @foreach (var subject in subjectsDetails)
                                {
                                    <li>
                                        @subject
                                    </li>
                                }
                            </ul>
                        }
                        else
                        {
                            <span class="single-person">@subjectsDetails[0]</span>
                        }
                    </div>
                    <div class="people">
                        <span class="similar-bold">
                            <strong>Officer@(officersDetails.Count != 1? "s:" : ":")</strong>
                        </span>
                        @if (officersDetails.Count > 1)
                        {
                            <ul class="people-list">
                                @foreach (var officer in officersDetails)
                                {
                                    <li>
                                        @officer
                                    </li>
                                }
                            </ul>
                        }
                        else
                        {
                             <span class="single-person">@officersDetails[0]</span>
                        }
                    </div>
                </div>
                <div class="d-inline-block float-right">
                    <div style="border-radius:3px; width:100%;" class="embed-responsive embed-responsive-2by1">
                        <iframe class="embed-responsive-item border" src="https://www.youtube.com/embed/vtWH0uzx4R8"
                                frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen>
                        </iframe>
                    </div>
                </div>
            </div>
            <div>
                <p class="mb-0 d-block"><strong>Context:</strong> @StringExtensions.TruncateString(Event.Timelineinfo.Context)</p>
            </div>
        </div>
    </div>
</div>


@code {
    [Parameter]
    public ViewSimilar Event { get; set; }
    List<string> subjectsDetails;
    List<string> officersDetails;
    string subjectList;
    string officerList;
    protected override void OnInitialized()
    {
        subjectsDetails = StringExtensions.GetSummaryList(Event.Subjects);
        officersDetails = StringExtensions.GetSummaryList(Event.Officers);
        subjectList = StringExtensions.CommaQuibbling(subjectsDetails);
        officerList = StringExtensions.CommaQuibbling(officersDetails);
    }   

}
