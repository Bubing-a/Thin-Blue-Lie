@using DiffPlex.DiffBuilder;
@using DiffPlex.DiffBuilder.Model;
@using ThinBlueLieB.Helper.Extensions
@inject IJSRuntime JSRuntime
@inject ISideBySideDiffBuilder sideBySide
@using static ThinBlueLieB.Helper.Extensions.EnumExtensions
@using static ThinBlueLieB.Helper.Extensions.StringExtensions

@foreach (var IsOriginal in boolValues)
{
<div class="col-6 px-4">
    <h5 class="border-bottom">Subject's information</h5>
    
    @*<p>
        @if (IsOriginal){
            <CompareLine Model="Model.OldText.Lines.FirstOrDefault()"></CompareLine>
        }
        else {
            <CompareLine Model="Model.NewText.Lines.FirstOrDefault()"></CompareLine>
        }
    </p>
    <span class="d-block">
        @((MarkupString)(GetComparePersonSummary(
        new CommonPerson { Age = (int)OldSubject.Age, Sex = OldSubject.Sex, Race = OldSubject.Race },
        new CommonPerson { Age = (int)NewSubject.Age, Sex = NewSubject.Sex, Race = NewSubject.Race },
        IsOriginal
        )))
    </span>
    <span class="d-block">
        @((MarkupString)(NewSubject.Armed == OldSubject.Armed ? "Armed" : IsOriginal ? "<del>" + ToArmedEnum(OldSubject.Armed).ToString() + "</del>" : "<ins>" + ToArmedEnum(NewSubject.Armed).ToString() + "</ins>"))
    </span>*@

</div>
}
@code {
    [Parameter]
    public List<SideBySideDiffModel> Model { get; set; }
    [Parameter]
    public DBSubject OldSubjects { get; set; }
    [Parameter]
    public DBSubject NewSubjects { get; set; }
    List<bool> boolValues = new List<bool> { true, false };
}
