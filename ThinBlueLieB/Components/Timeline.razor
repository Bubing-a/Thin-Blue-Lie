@using DataAccessLibrary.DataModels;
@using static ThinBlueLieB.Helper.Extensions
@using ThinBlueLieB.Helper
@inject NavigationManager MyNavigationManager
@inject ISearches searches

<div @onclick="PrevWeek" id="triangle-left"> <div class="empty"></div></div>
@*@foreach ((var day, Int32 i) in Day.Select((day, i) => (day, i)))
    {
        <div class="week btn" onclick='location.href = "?d=@Dates[i].Year-@Dates[i].Month.ToString().PadLeft(2, '0')-@Dates[i].Day.ToString().PadLeft(2, '0')"'>
            <div class="timeline-label">
                <span>@Dates[i].DayOfWeek</span>
                <span> @Dates[i].Month/@Dates[i].Day</span>
            </div>
            <div class="badge-bar">
                <svg class="badge">
                    <circle cx="13" cy="13" r="12" stroke="DarkBlue" stroke-width="2" fill="#dedede" />
                    <text x="8" y="18" fill="black">@day.Count</text>
                </svg>
            </div>
            <input type="radio">
        </div>
    }*@
<div @onclick="NextWeek" id="triangle-right"><div class="empty"></div></div>

@code {
#nullable enable
    [Parameter]
    public string? current { get; set; }
#nullable enable
    [Parameter]
    public string? date { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await searches.GetTimeline(current, 0, date);
    }
    public async Task NextWeek()
    {
        await searches.GetTimeline(current, +7, date);
    }
    public async Task PrevWeek()
    {
        await searches.GetTimeline(current, +7, date);
    }

}

