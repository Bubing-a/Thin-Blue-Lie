@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Buttons
@using ThinBlueLieB.Helper.Extensions
@using System.IO
@using static ThinBlueLieB.Helper.ConfigHelper
@using static DataAccessLibrary.Enums.MediaEnums
@using static ThinBlueLieB.Helper.Extensions.EnumExtensions
@using static ThinBlueLieB.Helper.Algorithms.LinkConverter
@using AutoMapper 
@inject IMapper Mapper  

<style>
    .preview-image {
        height: auto;
        width: 100%;
    }
    .e-card > .e-card-image {
        min-height: 100px !important;
    }
</style>
<div class="AddMedia">
            <div name="mediaAdd" class="container-fluid d-flex px-0 mr-0">               
                <div class="col-8">
                    <div class="form-row">
                        <div class="col-12 pl-0">
                            @if (media.SourceFrom == MediaEnums.SourceFromEnum.Device)
                            {
                                <div class="form-group MediaFile">
                                    <SfUploader Enabled="!IsEdit" Multiple="false" ID="UploadFiles" CssClass="e-filled mt-2" MaxFileSize="12000000" DropArea=".control-fluid" AllowedExtensions=".img, .jpeg, .jpg, .png">
                                        <UploaderEvents ValueChange="OnFileChange" OnRemove="OnFileRemove"></UploaderEvents>
                                    </SfUploader>
                                </div>
                            }
                            else
                            {
                                <div class="form-group MediaLink">
                                    <SfTextBox Enabled="!IsEdit" CssClass="e-filled" Placeholder="Link to Media" FloatLabelType="@FloatLabelType.Always" @bind-Value="media.SourcePath"></SfTextBox>
                                    <ValidationMessage For="@(() => media.SourcePath)"></ValidationMessage>
                                </div>
                            }
                        </div>
                    </div>
                    <div class="form-row position-relative">
                        <div class="my-2 w-100">
                            <SfTextBox CssClass="e-filled" Placeholder="Provide a brief description" FloatLabelType="@FloatLabelType.Always" @bind-Value="media.Blurb"></SfTextBox>
                            <ValidationMessage For="@(() => media.Blurb)"></ValidationMessage>
                        </div>
                    </div>
                    <div class="form-row align-middle mb-2">
                        @if (media.MediaType != MediaTypeEnum.News) { 
                        <div class="col-8 dropdown pl-0">
                            <label class="mb-1">
                                Source's Location
                            </label>
                            <SfDropDownList Enabled="!IsEdit" TItem="SourceFromDropDown" Text="@(media.SourceFrom != null? GetEnumDisplayName((SourceFromEnum)media.SourceFrom).ToString() : "Source Location")" TValue="SourceFromEnum?" PopupHeight="230px" Placeholder="Source Location" @bind-Value="@media.SourceFrom" DataSource="@(media.MediaType == MediaTypeEnum.Image? ImageSourceLocations : VideoSourceLocations)">
                                <DropDownListFieldSettings Text="Text" Value="Value"></DropDownListFieldSettings>
                            </SfDropDownList>
                            <ValidationMessage For="@(() => media.SourceFrom)"></ValidationMessage>
                        </div>
                        }
                        <div class="@(media.MediaType == MediaTypeEnum.News? "col-12" : "col-4")">
                            <label class="mb-1">
                                Credit
                            </label>
                            <SfTextBox CssClass="e-filled" Placeholder="Credit" FloatLabelType="@FloatLabelType.Never" @bind-Value="media.Credit"></SfTextBox>
                        </div>
                    </div>
                    @if (media.MediaType != MediaTypeEnum.News) { 
                    <div>
                        <label class="form-check-label d-inline">
                            Any blood or gore?<span class="text-danger ml-1">*</span>
                            <ValidationMessage For="@(() => media.Gore)"></ValidationMessage>
                        </label>
                        <div class="d-inline">
                            <div class="form-check d-inline">
                                <SfRadioButton Label="No" Name="@Guid" Value="0" Checked="@media.Gore"></SfRadioButton>
                            </div>
                            <div class="form-check d-inline">
                                <SfRadioButton Label="Yes" Name="@Guid" Value="1" Checked="@media.Gore"></SfRadioButton>
                            </div>
                        </div>
                    </div>
                    }
                </div>
                <div class="col-4">
                    <div class="d-flex h-100 justify-content-center align-items-center">
                        @if (media.SourceFrom == MediaEnums.SourceFromEnum.Device)
                        {
                            @*<img class="preview-image" src="@((media.Source?.FileInfo as Syncfusion.Blazor.Inputs.FileInfo)?.RawFile)" />*@
                            <h5>There is currently no support for previews of uploaded images, but we are working on it</h5>
                        }
                        else if (media.MediaType == MediaEnums.MediaTypeEnum.News)
                        {
                            <NewsCard ShortVersion="true" newsUrl="@(string.IsNullOrEmpty(media.SourcePath)? "http://example.com" : media.SourcePath)"></NewsCard>
                        }
                        else
                        {
                            @if (media.SourcePath != null)
                            {
                                <img class="preview-image" src="@(GetLinkFromData(Mapper.Map<ViewMedia, Media>(media)))" />
                            }
                            else
                            {
                                <img class="preview-image" src="/Assets/Placeholder-Image.png" />
                            }
                        }
                    </div>
                </div>
    </div>
</div>
@code {
    [Parameter]
    public ViewMedia media { get; set; }
    [CascadingParameter]
    public bool IsEdit { get; set; }
    [Parameter]
    public EventCallback<int> MoveMediaUp { get; set; }
    [Parameter]
    public EventCallback<int> MoveMediaDown { get; set; }
    [Parameter]
    public EventCallback<int> MoveMediaTop { get; set; }
    [Parameter]
    public EventCallback<int> DeleteMedia { get; set; }
    string Guid = StringExtensions.RandomString(12);

    class SourceFromDropDown
    {
        public string Text { get; set; }
        public SourceFromEnum Value { get; set; }
    }

    List<SourceFromDropDown> ImageSourceLocations = new List<SourceFromDropDown>
    {
        new SourceFromDropDown
        {
            Text = GetEnumDisplayName(SourceFromEnum.Device),
            Value = SourceFromEnum.Device
        },
        new SourceFromDropDown
        {
            Text = GetEnumDisplayName(SourceFromEnum.Link),
            Value = SourceFromEnum.Link
        }
    };
    List<SourceFromDropDown> VideoSourceLocations = new List<SourceFromDropDown>
    {
        new SourceFromDropDown
        {
            Text = GetEnumDisplayName(SourceFromEnum.Youtube),
            Value = SourceFromEnum.Youtube
        },
        new SourceFromDropDown
        {
            Text = GetEnumDisplayName(SourceFromEnum.Reddit) + " (Unsupported)",
            Value = SourceFromEnum.Reddit
        }
    };

    protected override void OnInitialized()
    {

    }

    public void OnFileChange(UploadChangeEventArgs args)
    {
        // Console.WriteLine(args.Files[0].FileInfo.Name);
        media.Source = args.Files[0];
    }

    private void OnFileRemove(RemovingEventArgs args)
    {
        //foreach (var removeFile in args.FilesData)
        media.Source = null;
    }
}
