@using ThinBlueLieB.Helper
@using static ThinBlueLieB.Searches.SearchClasses
@using static ThinBlueLieB.Helper.Extensions;
@using Syncfusion.Blazor.Buttons;
@inherits SimilarPeopleBase

<style>
    .event {
        list-style-type: none;
    }
</style>
@*@if (People.Count == 0)
    {
        <div class="container mt-2" style="min-height:100px;">
            <h5>There are no similar People!</h5>
        </div>
    }*@
@if (People.Count != 0)
{
    @foreach (var Person in People)
    {
        <div id="likePeople">
            <div class="card border-dark mb-3 px-0">
                <div class="card-header d-flex container ">
                    <div>
                        <span class="name">@Person.Name</span>
                    </div>
                    <div @onclick="@(() => SetSameAs.InvokeAsync(new Tuple<int,int>(Person.IdPerson, PersonListIndex)))" @onclick:stopPropagation="false" @onclick:preventDefault class="d-inline-flex ml-2">
                        <SfButton CssClass="e-small e-flat float-right" IsPrimary="true">
                            Same Person
                        </SfButton>
                    </div>
                    <div class="ml-auto">
                        <span class="race">@Enum.GetName(typeof(TimelineinfoEnums.RaceEnum), Person.Race)</span>
                        <span class="sex">@Enum.GetName(typeof(TimelineinfoEnums.SexEnum), Person.Sex)</span>
                    </div>
                </div>
                <div class="card-body text-dark mt-0 pb-1">
                    <ul class="container">
                        @foreach (var item in Person.Events)
                        {
                            <li class="event">
                                <a href="#">
                                    <span class="ml-md-1">@item.Date.ToString("yyyy, MMMM dd") ---</span>
                                    <span>@item.City,</span>
                                    <span>@GetEnumDisplayName((TimelineinfoEnums.StateEnum)item.State)</span>
                                </a>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </div>
    }
}
@code {
    [Parameter]
    public List<SimilarPersonGeneral> People { get; set; } = null;

    [Parameter]
    public int PersonListIndex { get; set; }
    [Parameter]
    public EventCallback<Tuple<int, int>> SetSameAs { get; set; }
}
